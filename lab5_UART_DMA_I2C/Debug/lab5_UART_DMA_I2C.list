
lab5_UART_DMA_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d50  08004d50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d50  08004d50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08004dc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004dc8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7ef  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3d  00000000  00000000  0002d887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  000301d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d7a  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d435  00000000  00000000  0004188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fa41  00000000  00000000  0004ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000ae754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049ac 	.word	0x080049ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080049ac 	.word	0x080049ac

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <uart_process_command>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
static void uart_process_command(char *cmd)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af04      	add	r7, sp, #16
 800023a:	6078      	str	r0, [r7, #4]
	//printf is overloaded to print data into UART2
	//printf("received: '%s'\n", cmd);

	char *command;
	command = strtok(cmd, " "); //similarly to python's list.split, but takes only first one..
 800023c:	4a75      	ldr	r2, [pc, #468]	; (8000414 <uart_process_command+0x1e0>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f003 faa6 	bl	8003794 <strtok>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]
	if (  strcasecmp(command, "HELLO") == 0   ){
 800024c:	4a72      	ldr	r2, [pc, #456]	; (8000418 <uart_process_command+0x1e4>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f003 fa84 	bl	8003760 <strcasecmp>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d104      	bne.n	8000266 <uart_process_command+0x32>
		printf("I'm ready!\n");
 800025c:	4b6f      	ldr	r3, [pc, #444]	; (800041c <uart_process_command+0x1e8>)
 800025e:	0018      	movs	r0, r3
 8000260:	f003 fa74 	bl	800374c <puts>

	else{
		printf("Unknown command\n");
	}

}
 8000264:	e0d1      	b.n	800040a <uart_process_command+0x1d6>
	else if (  strcasecmp(command, "LED2") == 0   )
 8000266:	4a6e      	ldr	r2, [pc, #440]	; (8000420 <uart_process_command+0x1ec>)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f003 fa77 	bl	8003760 <strcasecmp>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d133      	bne.n	80002de <uart_process_command+0xaa>
		command = strtok(NULL, " "); //take last result from strtok -> 2nd word
 8000276:	4b67      	ldr	r3, [pc, #412]	; (8000414 <uart_process_command+0x1e0>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f003 fa8a 	bl	8003794 <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	60fb      	str	r3, [r7, #12]
		printf("I'm ready!\n");
 8000284:	4b65      	ldr	r3, [pc, #404]	; (800041c <uart_process_command+0x1e8>)
 8000286:	0018      	movs	r0, r3
 8000288:	f003 fa60 	bl	800374c <puts>
		if (  strcasecmp(command, "ON") == 0   ){
 800028c:	4a65      	ldr	r2, [pc, #404]	; (8000424 <uart_process_command+0x1f0>)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0011      	movs	r1, r2
 8000292:	0018      	movs	r0, r3
 8000294:	f003 fa64 	bl	8003760 <strcasecmp>
 8000298:	1e03      	subs	r3, r0, #0
 800029a:	d10b      	bne.n	80002b4 <uart_process_command+0x80>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET );
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f94a 	bl	800153e <HAL_GPIO_WritePin>
			printf("Turning LED2 ON\n");
 80002aa:	4b5f      	ldr	r3, [pc, #380]	; (8000428 <uart_process_command+0x1f4>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f003 fa4d 	bl	800374c <puts>
}
 80002b2:	e0aa      	b.n	800040a <uart_process_command+0x1d6>
		else if (  strcasecmp(command, "OFF") == 0   ){
 80002b4:	4a5d      	ldr	r2, [pc, #372]	; (800042c <uart_process_command+0x1f8>)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	0011      	movs	r1, r2
 80002ba:	0018      	movs	r0, r3
 80002bc:	f003 fa50 	bl	8003760 <strcasecmp>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d000      	beq.n	80002c6 <uart_process_command+0x92>
 80002c4:	e0a1      	b.n	800040a <uart_process_command+0x1d6>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET );
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2200      	movs	r2, #0
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 f935 	bl	800153e <HAL_GPIO_WritePin>
			printf("Turning LED2 OFF\n");
 80002d4:	4b56      	ldr	r3, [pc, #344]	; (8000430 <uart_process_command+0x1fc>)
 80002d6:	0018      	movs	r0, r3
 80002d8:	f003 fa38 	bl	800374c <puts>
}
 80002dc:	e095      	b.n	800040a <uart_process_command+0x1d6>
	else if (  strcasecmp(command, "LED1") == 0   )
 80002de:	4a55      	ldr	r2, [pc, #340]	; (8000434 <uart_process_command+0x200>)
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	0011      	movs	r1, r2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f003 fa3b 	bl	8003760 <strcasecmp>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d12f      	bne.n	800034e <uart_process_command+0x11a>
		command = strtok(NULL, " "); //take last result from strtok -> 2nd word
 80002ee:	4b49      	ldr	r3, [pc, #292]	; (8000414 <uart_process_command+0x1e0>)
 80002f0:	0019      	movs	r1, r3
 80002f2:	2000      	movs	r0, #0
 80002f4:	f003 fa4e 	bl	8003794 <strtok>
 80002f8:	0003      	movs	r3, r0
 80002fa:	60fb      	str	r3, [r7, #12]
		printf("I'm ready!\n");
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <uart_process_command+0x1e8>)
 80002fe:	0018      	movs	r0, r3
 8000300:	f003 fa24 	bl	800374c <puts>
		if (  strcasecmp(command, "ON") == 0   ){
 8000304:	4a47      	ldr	r2, [pc, #284]	; (8000424 <uart_process_command+0x1f0>)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	0011      	movs	r1, r2
 800030a:	0018      	movs	r0, r3
 800030c:	f003 fa28 	bl	8003760 <strcasecmp>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d109      	bne.n	8000328 <uart_process_command+0xf4>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET );
 8000314:	4b48      	ldr	r3, [pc, #288]	; (8000438 <uart_process_command+0x204>)
 8000316:	2201      	movs	r2, #1
 8000318:	2104      	movs	r1, #4
 800031a:	0018      	movs	r0, r3
 800031c:	f001 f90f 	bl	800153e <HAL_GPIO_WritePin>
			printf("Turning LED1 ON\n");
 8000320:	4b46      	ldr	r3, [pc, #280]	; (800043c <uart_process_command+0x208>)
 8000322:	0018      	movs	r0, r3
 8000324:	f003 fa12 	bl	800374c <puts>
		if (  strcasecmp(command, "OFF") == 0   ){
 8000328:	4a40      	ldr	r2, [pc, #256]	; (800042c <uart_process_command+0x1f8>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	0011      	movs	r1, r2
 800032e:	0018      	movs	r0, r3
 8000330:	f003 fa16 	bl	8003760 <strcasecmp>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d168      	bne.n	800040a <uart_process_command+0x1d6>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET );
 8000338:	4b3f      	ldr	r3, [pc, #252]	; (8000438 <uart_process_command+0x204>)
 800033a:	2200      	movs	r2, #0
 800033c:	2104      	movs	r1, #4
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f8fd 	bl	800153e <HAL_GPIO_WritePin>
			printf("Turning LED1 OFF\n");
 8000344:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <uart_process_command+0x20c>)
 8000346:	0018      	movs	r0, r3
 8000348:	f003 fa00 	bl	800374c <puts>
}
 800034c:	e05d      	b.n	800040a <uart_process_command+0x1d6>
	else if (  strcasecmp(command, "STATUS") == 0   )
 800034e:	4a3d      	ldr	r2, [pc, #244]	; (8000444 <uart_process_command+0x210>)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	0011      	movs	r1, r2
 8000354:	0018      	movs	r0, r3
 8000356:	f003 fa03 	bl	8003760 <strcasecmp>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d121      	bne.n	80003a2 <uart_process_command+0x16e>
		if (HAL_GPIO_ReadPin(LD1_GPIO_Port,LD1_Pin ) == 0 )
 800035e:	4b36      	ldr	r3, [pc, #216]	; (8000438 <uart_process_command+0x204>)
 8000360:	2104      	movs	r1, #4
 8000362:	0018      	movs	r0, r3
 8000364:	f001 f8ce 	bl	8001504 <HAL_GPIO_ReadPin>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d104      	bne.n	8000376 <uart_process_command+0x142>
			printf("status LED 1: OFF");
 800036c:	4b36      	ldr	r3, [pc, #216]	; (8000448 <uart_process_command+0x214>)
 800036e:	0018      	movs	r0, r3
 8000370:	f003 f960 	bl	8003634 <iprintf>
 8000374:	e003      	b.n	800037e <uart_process_command+0x14a>
			printf("status LED 1: ON");
 8000376:	4b35      	ldr	r3, [pc, #212]	; (800044c <uart_process_command+0x218>)
 8000378:	0018      	movs	r0, r3
 800037a:	f003 f95b 	bl	8003634 <iprintf>
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port,LD2_Pin ) == 0 )
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2120      	movs	r1, #32
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f8bd 	bl	8001504 <HAL_GPIO_ReadPin>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d104      	bne.n	8000398 <uart_process_command+0x164>
			printf("status LED 2: OFF\n");
 800038e:	4b30      	ldr	r3, [pc, #192]	; (8000450 <uart_process_command+0x21c>)
 8000390:	0018      	movs	r0, r3
 8000392:	f003 f9db 	bl	800374c <puts>
}
 8000396:	e038      	b.n	800040a <uart_process_command+0x1d6>
			printf("status LED 2: ON\n");
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <uart_process_command+0x220>)
 800039a:	0018      	movs	r0, r3
 800039c:	f003 f9d6 	bl	800374c <puts>
}
 80003a0:	e033      	b.n	800040a <uart_process_command+0x1d6>
	else if (  strcasecmp(command, "READ") == 0   )
 80003a2:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <uart_process_command+0x224>)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f003 f9d9 	bl	8003760 <strcasecmp>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d127      	bne.n	8000402 <uart_process_command+0x1ce>
		command = strtok(NULL, " ");
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <uart_process_command+0x1e0>)
 80003b4:	0019      	movs	r1, r3
 80003b6:	2000      	movs	r0, #0
 80003b8:	f003 f9ec 	bl	8003794 <strtok>
 80003bc:	0003      	movs	r3, r0
 80003be:	60fb      	str	r3, [r7, #12]
		uint16_t addr = atoi(command);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	0018      	movs	r0, r3
 80003c4:	f003 f8fd 	bl	80035c2 <atoi>
 80003c8:	0002      	movs	r2, r0
 80003ca:	240a      	movs	r4, #10
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, 1000);
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	881a      	ldrh	r2, [r3, #0]
 80003d4:	4821      	ldr	r0, [pc, #132]	; (800045c <uart_process_command+0x228>)
 80003d6:	23fa      	movs	r3, #250	; 0xfa
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	9302      	str	r3, [sp, #8]
 80003dc:	2301      	movs	r3, #1
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2509      	movs	r5, #9
 80003e2:	197b      	adds	r3, r7, r5
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2302      	movs	r3, #2
 80003e8:	21a0      	movs	r1, #160	; 0xa0
 80003ea:	f001 f95b 	bl	80016a4 <HAL_I2C_Mem_Read>
		printf("Address 0x%04X = 0x%02X\n", addr, value);
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	8819      	ldrh	r1, [r3, #0]
 80003f2:	197b      	adds	r3, r7, r5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	001a      	movs	r2, r3
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <uart_process_command+0x22c>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f003 f91a 	bl	8003634 <iprintf>
}
 8000400:	e003      	b.n	800040a <uart_process_command+0x1d6>
		printf("Unknown command\n");
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <uart_process_command+0x230>)
 8000404:	0018      	movs	r0, r3
 8000406:	f003 f9a1 	bl	800374c <puts>
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b004      	add	sp, #16
 8000410:	bdb0      	pop	{r4, r5, r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	080049c4 	.word	0x080049c4
 8000418:	080049c8 	.word	0x080049c8
 800041c:	080049d0 	.word	0x080049d0
 8000420:	080049dc 	.word	0x080049dc
 8000424:	080049e4 	.word	0x080049e4
 8000428:	080049e8 	.word	0x080049e8
 800042c:	080049f8 	.word	0x080049f8
 8000430:	080049fc 	.word	0x080049fc
 8000434:	08004a10 	.word	0x08004a10
 8000438:	48000800 	.word	0x48000800
 800043c:	08004a18 	.word	0x08004a18
 8000440:	08004a28 	.word	0x08004a28
 8000444:	08004a3c 	.word	0x08004a3c
 8000448:	08004a44 	.word	0x08004a44
 800044c:	08004a58 	.word	0x08004a58
 8000450:	08004a6c 	.word	0x08004a6c
 8000454:	08004a80 	.word	0x08004a80
 8000458:	08004a94 	.word	0x08004a94
 800045c:	20000160 	.word	0x20000160
 8000460:	08004a9c 	.word	0x08004a9c
 8000464:	08004ab8 	.word	0x08004ab8

08000468 <_write>:

int _write(int file, char const *buf, int n)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	b29a      	uxth	r2, r3
 8000478:	2301      	movs	r3, #1
 800047a:	425b      	negs	r3, r3
 800047c:	68b9      	ldr	r1, [r7, #8]
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <_write+0x28>)
 8000480:	f002 fa58 	bl	8002934 <HAL_UART_Transmit>
	return n; //size
 8000484:	687b      	ldr	r3, [r7, #4]
}
 8000486:	0018      	movs	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	b004      	add	sp, #16
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200001ac 	.word	0x200001ac

08000494 <uart_byte_avaiable>:

static void uart_byte_avaiable(uint8_t c)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	0002      	movs	r2, r0
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	701a      	strb	r2, [r3, #0]
	 static uint16_t cnt;
	 static char data[CMD_BUFFER_LEN];
	 // 32 - 126 represents common ASCI characters

	 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126){
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <uart_byte_avaiable+0x80>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	2b3f      	cmp	r3, #63	; 0x3f
 80004a6:	d814      	bhi.n	80004d2 <uart_byte_avaiable+0x3e>
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b1f      	cmp	r3, #31
 80004ae:	d910      	bls.n	80004d2 <uart_byte_avaiable+0x3e>
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b7e      	cmp	r3, #126	; 0x7e
 80004b6:	d80c      	bhi.n	80004d2 <uart_byte_avaiable+0x3e>

		 data[cnt] = c; //put received character into data array
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <uart_byte_avaiable+0x80>)
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	0019      	movs	r1, r3
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <uart_byte_avaiable+0x84>)
 80004c0:	1dfa      	adds	r2, r7, #7
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	545a      	strb	r2, [r3, r1]
		 cnt++; //increment pointer of array
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <uart_byte_avaiable+0x80>)
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <uart_byte_avaiable+0x80>)
 80004d0:	801a      	strh	r2, [r3, #0]
	 }
	 if ((c == '\n' || c == '\r' || c == '*') && cnt > 0) {
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b0a      	cmp	r3, #10
 80004d8:	d007      	beq.n	80004ea <uart_byte_avaiable+0x56>
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b0d      	cmp	r3, #13
 80004e0:	d003      	beq.n	80004ea <uart_byte_avaiable+0x56>
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b2a      	cmp	r3, #42	; 0x2a
 80004e8:	d110      	bne.n	800050c <uart_byte_avaiable+0x78>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <uart_byte_avaiable+0x80>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00c      	beq.n	800050c <uart_byte_avaiable+0x78>
		 data[cnt] = '\0'; //create C string from received character
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <uart_byte_avaiable+0x80>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	001a      	movs	r2, r3
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <uart_byte_avaiable+0x84>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	5499      	strb	r1, [r3, r2]
		 uart_process_command(data);
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <uart_byte_avaiable+0x84>)
 8000500:	0018      	movs	r0, r3
 8000502:	f7ff fe97 	bl	8000234 <uart_process_command>
		 cnt = 0;
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <uart_byte_avaiable+0x80>)
 8000508:	2200      	movs	r2, #0
 800050a:	801a      	strh	r2, [r3, #0]
	 }
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000ce 	.word	0x200000ce
 8000518:	200000d0 	.word	0x200000d0

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fba5 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f83f 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f92d 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 800052e:	f000 f90d 	bl	800074c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f8db 	bl	80006ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000536:	f000 f899 	bl	800066c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buffer, RX_BUFFER_LEN);
 800053a:	4917      	ldr	r1, [pc, #92]	; (8000598 <main+0x7c>)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <main+0x80>)
 800053e:	2240      	movs	r2, #64	; 0x40
 8000540:	0018      	movs	r0, r3
 8000542:	f002 faa0 	bl	8002a86 <HAL_UART_Receive_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	while(uart_rx_pointer_read != uart_rx_pointer_write){
 8000546:	e01b      	b.n	8000580 <main+0x64>
		  uint8_t b = uart_rx_buffer[uart_rx_pointer_read];
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <main+0x84>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	b29b      	uxth	r3, r3
 800054e:	0019      	movs	r1, r3
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <main+0x7c>)
 8000554:	5c52      	ldrb	r2, [r2, r1]
 8000556:	701a      	strb	r2, [r3, #0]
		  uart_rx_pointer_read++;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <main+0x84>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	3301      	adds	r3, #1
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x84>)
 8000564:	801a      	strh	r2, [r3, #0]

		  if (uart_rx_pointer_read >= RX_BUFFER_LEN){
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <main+0x84>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	2b3f      	cmp	r3, #63	; 0x3f
 800056e:	d902      	bls.n	8000576 <main+0x5a>
			  uart_rx_pointer_read = 0;
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <main+0x84>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
		  }
		  uart_byte_avaiable(b);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ff8a 	bl	8000494 <uart_byte_avaiable>
	while(uart_rx_pointer_read != uart_rx_pointer_write){
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <main+0x84>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	b29b      	uxth	r3, r3
 8000586:	0019      	movs	r1, r3
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <main+0x88>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4299      	cmp	r1, r3
 8000594:	d1d8      	bne.n	8000548 <main+0x2c>
 8000596:	e7f3      	b.n	8000580 <main+0x64>
 8000598:	2000008c 	.word	0x2000008c
 800059c:	200001ac 	.word	0x200001ac
 80005a0:	200000cc 	.word	0x200000cc
 80005a4:	2000011c 	.word	0x2000011c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b095      	sub	sp, #84	; 0x54
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	2420      	movs	r4, #32
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2330      	movs	r3, #48	; 0x30
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 f833 	bl	8003624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	2310      	movs	r3, #16
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 f82b 	bl	8003624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ce:	003b      	movs	r3, r7
 80005d0:	0018      	movs	r0, r3
 80005d2:	2310      	movs	r3, #16
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f003 f824 	bl	8003624 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2210      	movs	r2, #16
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2202      	movs	r2, #2
 80005f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	22a0      	movs	r2, #160	; 0xa0
 8000600:	0392      	lsls	r2, r2, #14
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	187b      	adds	r3, r7, r1
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fc03 	bl	8001e18 <HAL_RCC_OscConfig>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000616:	f000 f947 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	2110      	movs	r1, #16
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2207      	movs	r2, #7
 8000620:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2202      	movs	r2, #2
 8000626:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2101      	movs	r1, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f001 ff07 	bl	800244c <HAL_RCC_ClockConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000642:	f000 f931 	bl	80008a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000646:	003b      	movs	r3, r7
 8000648:	2220      	movs	r2, #32
 800064a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800064c:	003b      	movs	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f84b 	bl	80026f0 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800065e:	f000 f923 	bl	80008a8 <Error_Handler>
  }
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b015      	add	sp, #84	; 0x54
 8000668:	bd90      	pop	{r4, r7, pc}
	...

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 ff65 	bl	8001578 <HAL_I2C_Init>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 f8f9 	bl	80008a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fb14 	bl	8001ce8 <HAL_I2CEx_ConfigAnalogFilter>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 f8f0 	bl	80008a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fb57 	bl	8001d80 <HAL_I2CEx_ConfigDigitalFilter>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 f8e7 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000160 	.word	0x20000160
 80006e4:	40005400 	.word	0x40005400
 80006e8:	2000090e 	.word	0x2000090e

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	2296      	movs	r2, #150	; 0x96
 80006fa:	0212      	lsls	r2, r2, #8
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	0018      	movs	r0, r3
 8000732:	f002 f8ab 	bl	800288c <HAL_UART_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8b5 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200001ac 	.word	0x200001ac
 8000748:	40004400 	.word	0x40004400

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_DMA_Init+0x38>)
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_DMA_Init+0x38>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_DMA_Init+0x38>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200b      	movs	r0, #11
 8000770:	f000 fb8e 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000774:	200b      	movs	r0, #11
 8000776:	f000 fba0 	bl	8000eba <HAL_NVIC_EnableIRQ>

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	2414      	movs	r4, #20
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 ff43 	bl	8003624 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0309      	lsls	r1, r1, #12
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	031b      	lsls	r3, r3, #12
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	03c9      	lsls	r1, r1, #15
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	03db      	lsls	r3, r3, #15
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0289      	lsls	r1, r1, #10
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_GPIO_Init+0x118>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	02c9      	lsls	r1, r1, #11
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_GPIO_Init+0x118>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	02db      	lsls	r3, r3, #11
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_GPIO_Init+0x11c>)
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fe92 	bl	800153e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	2390      	movs	r3, #144	; 0x90
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fe8b 	bl	800153e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2284      	movs	r2, #132	; 0x84
 8000834:	0392      	lsls	r2, r2, #14
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	193b      	adds	r3, r7, r4
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_GPIO_Init+0x11c>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 fced 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2204      	movs	r2, #4
 800084e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2201      	movs	r2, #1
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000862:	193b      	adds	r3, r7, r4
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_GPIO_Init+0x11c>)
 8000866:	0019      	movs	r1, r3
 8000868:	0010      	movs	r0, r2
 800086a:	f000 fcdb 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2220      	movs	r2, #32
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000888:	187a      	adds	r2, r7, r1
 800088a:	2390      	movs	r3, #144	; 0x90
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fcc7 	bl	8001224 <HAL_GPIO_Init>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	; 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	619a      	str	r2, [r3, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69da      	ldr	r2, [r3, #28]
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0549      	lsls	r1, r1, #21
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_MspInit+0x44>)
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	4013      	ands	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	2414      	movs	r4, #20
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f002 fe88 	bl	8003624 <memset>
  if(hi2c->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_I2C_MspInit+0x90>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d132      	bne.n	8000984 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	02c9      	lsls	r1, r1, #11
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	02db      	lsls	r3, r3, #11
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	22c0      	movs	r2, #192	; 0xc0
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2212      	movs	r2, #18
 8000948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2203      	movs	r2, #3
 8000954:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2201      	movs	r2, #1
 800095a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	187b      	adds	r3, r7, r1
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <HAL_I2C_MspInit+0x98>)
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f000 fc5e 	bl	8001224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	0389      	lsls	r1, r1, #14
 8000972:	430a      	orrs	r2, r1
 8000974:	61da      	str	r2, [r3, #28]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000978:	69da      	ldr	r2, [r3, #28]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	039b      	lsls	r3, r3, #14
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b00b      	add	sp, #44	; 0x2c
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	40005400 	.word	0x40005400
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2414      	movs	r4, #20
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2314      	movs	r3, #20
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f002 fe3a 	bl	8003624 <memset>
  if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <HAL_UART_MspInit+0xdc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d158      	bne.n	8000a6c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009ca:	69da      	ldr	r2, [r3, #28]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_UART_MspInit+0xe0>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fc02 	bl	8001224 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0xe8>)
 8000a24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a46:	2220      	movs	r2, #32
 8000a48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fa4e 	bl	8000ef4 <HAL_DMA_Init>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a5c:	f7ff ff24 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a64:	671a      	str	r2, [r3, #112]	; 0x70
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0xe4>)
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00b      	add	sp, #44	; 0x2c
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	2000011c 	.word	0x2000011c
 8000a80:	40020058 	.word	0x40020058

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f92a 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fac8 	bl	8001050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	2000011c 	.word	0x2000011c

08000acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_kill>:

int _kill(int pid, int sig)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ae2:	f002 fd75 	bl	80035d0 <__errno>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	2216      	movs	r2, #22
 8000aea:	601a      	str	r2, [r3, #0]
	return -1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_exit>:

void _exit (int status)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b00:	2301      	movs	r3, #1
 8000b02:	425a      	negs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ffe5 	bl	8000ad8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b0e:	e7fe      	b.n	8000b0e <_exit+0x16>

08000b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b22:	e000      	b.n	8000b26 <_read+0x16>
 8000b24:	bf00      	nop
 8000b26:	0001      	movs	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
	}

return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b006      	add	sp, #24
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	return -1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	425b      	negs	r3, r3
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	0192      	lsls	r2, r2, #6
 8000b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d3      	adds	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f002 fcfc 	bl	80035d0 <__errno>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	425b      	negs	r3, r3
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	18d2      	adds	r2, r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b006      	add	sp, #24
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20002000 	.word	0x20002000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	20000110 	.word	0x20000110
 8000c0c:	20000248 	.word	0x20000248

08000c10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c46:	f7ff ffe3 	bl	8000c10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c4a:	f002 fcc7 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fc65 	bl	800051c <main>

08000c52 <LoopForever>:

LoopForever:
    b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   r0, =_estack
 8000c54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08004d58 	.word	0x08004d58
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	20000244 	.word	0x20000244

08000c6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_IRQHandler>
	...

08000c70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <HAL_Init+0x24>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_Init+0x24>)
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f809 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fe15 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	23fa      	movs	r3, #250	; 0xfa
 8000cac:	0098      	lsls	r0, r3, #2
 8000cae:	f7ff fa35 	bl	800011c <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f7ff fa30 	bl	800011c <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f90b 	bl	8000eda <HAL_SYSTICK_Config>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e00f      	b.n	8000cec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d80b      	bhi.n	8000cea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8d8 	bl	8000e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_InitTick+0x64>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	18d2      	adds	r2, r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000230 	.word	0x20000230

08000d24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000230 	.word	0x20000230

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4a:	d809      	bhi.n	8000d60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	231f      	movs	r3, #31
 8000d54:	401a      	ands	r2, r3
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_EnableIRQ+0x30>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4091      	lsls	r1, r2
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
  }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff33 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ffaf 	bl	8000e48 <SysTick_Config>
 8000eea:	0003      	movs	r3, r0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e036      	b.n	8000f78 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2221      	movs	r2, #33	; 0x21
 8000f0e:	2102      	movs	r1, #2
 8000f10:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_DMA_Init+0x8c>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f946 	bl	80011ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2221      	movs	r2, #33	; 0x21
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}  
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	ffffc00f 	.word	0xffffc00f

08000f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000f92:	2317      	movs	r3, #23
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_DMA_Start_IT+0x24>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e04f      	b.n	8001048 <HAL_DMA_Start_IT+0xc4>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2220      	movs	r2, #32
 8000fac:	2101      	movs	r1, #1
 8000fae:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2221      	movs	r2, #33	; 0x21
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d13a      	bne.n	8001032 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2221      	movs	r2, #33	; 0x21
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	438a      	bics	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f8d7 	bl	8001194 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d008      	beq.n	8001000 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	210e      	movs	r1, #14
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e00f      	b.n	8001020 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	210a      	movs	r1, #10
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2104      	movs	r1, #4
 800101c:	438a      	bics	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e007      	b.n	8001042 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2220      	movs	r2, #32
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800103a:	2317      	movs	r3, #23
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2202      	movs	r2, #2
 8001040:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001042:	2317      	movs	r3, #23
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
} 
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	2204      	movs	r2, #4
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	d024      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x72>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2204      	movs	r2, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d020      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2220      	movs	r2, #32
 8001088:	4013      	ands	r3, r2
 800108a:	d107      	bne.n	800109c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2104      	movs	r1, #4
 8001098:	438a      	bics	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	2104      	movs	r1, #4
 80010a6:	4091      	lsls	r1, r2
 80010a8:	000a      	movs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d100      	bne.n	80010b6 <HAL_DMA_IRQHandler+0x66>
 80010b4:	e06a      	b.n	800118c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	0010      	movs	r0, r2
 80010be:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010c0:	e064      	b.n	800118c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2202      	movs	r2, #2
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_DMA_IRQHandler+0xda>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2202      	movs	r2, #2
 80010d6:	4013      	ands	r3, r2
 80010d8:	d027      	beq.n	800112a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2220      	movs	r2, #32
 80010e2:	4013      	ands	r3, r2
 80010e4:	d10b      	bne.n	80010fe <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	210a      	movs	r1, #10
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2221      	movs	r2, #33	; 0x21
 80010fa:	2101      	movs	r1, #1
 80010fc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	2102      	movs	r1, #2
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	2b00      	cmp	r3, #0
 800111c:	d036      	beq.n	800118c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	0010      	movs	r0, r2
 8001126:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001128:	e030      	b.n	800118c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	2208      	movs	r2, #8
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	d028      	beq.n	800118c <HAL_DMA_IRQHandler+0x13c>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2208      	movs	r2, #8
 800113e:	4013      	ands	r3, r2
 8001140:	d024      	beq.n	800118c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	210e      	movs	r1, #14
 800114e:	438a      	bics	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115a:	2101      	movs	r1, #1
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2221      	movs	r2, #33	; 0x21
 800116c:	2101      	movs	r1, #1
 800116e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	0010      	movs	r0, r2
 8001188:	4798      	blx	r3
    }
   }
}  
 800118a:	e7ff      	b.n	800118c <HAL_DMA_IRQHandler+0x13c>
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}

08001194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011aa:	2101      	movs	r1, #1
 80011ac:	4091      	lsls	r1, r2
 80011ae:	000a      	movs	r2, r1
 80011b0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d108      	bne.n	80011d4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011d2:	e007      	b.n	80011e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b004      	add	sp, #16
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <DMA_CalcBaseAndBitshift+0x30>)
 80011fa:	4694      	mov	ip, r2
 80011fc:	4463      	add	r3, ip
 80011fe:	2114      	movs	r1, #20
 8001200:	0018      	movs	r0, r3
 8001202:	f7fe ff8b 	bl	800011c <__udivsi3>
 8001206:	0003      	movs	r3, r0
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <DMA_CalcBaseAndBitshift+0x34>)
 8001212:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	bffdfff8 	.word	0xbffdfff8
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e14f      	b.n	80014d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4091      	lsls	r1, r2
 800123e:	000a      	movs	r2, r1
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <HAL_GPIO_Init+0x28>
 800124a:	e140      	b.n	80014ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
 8001254:	2b01      	cmp	r3, #1
 8001256:	d005      	beq.n	8001264 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001260:	2b02      	cmp	r3, #2
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d017      	beq.n	8001302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	4013      	ands	r3, r2
 800130a:	2b02      	cmp	r3, #2
 800130c:	d123      	bne.n	8001356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	58d3      	ldr	r3, [r2, r3]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2207      	movs	r2, #7
 8001320:	4013      	ands	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2107      	movs	r1, #7
 800133a:	400b      	ands	r3, r1
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	6939      	ldr	r1, [r7, #16]
 8001354:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	401a      	ands	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d100      	bne.n	8001398 <HAL_GPIO_Init+0x174>
 8001396:	e09a      	b.n	80014ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2c8>)
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_GPIO_Init+0x2c8>)
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_GPIO_Init+0x2c8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x2cc>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	2390      	movs	r3, #144	; 0x90
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	429a      	cmp	r2, r3
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x1e2>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_GPIO_Init+0x2d0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x1de>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <HAL_GPIO_Init+0x2d4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x1da>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <HAL_GPIO_Init+0x2d8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x1d6>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x1e4>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x1e4>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x1e4>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x1e4>
 8001406:	2300      	movs	r3, #0
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	2103      	movs	r1, #3
 800140c:	400a      	ands	r2, r1
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2cc>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	025b      	lsls	r3, r3, #9
 800143e:	4013      	ands	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	035b      	lsls	r3, r3, #13
 8001492:	4013      	ands	r3, r2
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43da      	mvns	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	039b      	lsls	r3, r3, #14
 80014bc:	4013      	ands	r3, r2
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_GPIO_Init+0x2dc>)
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	40da      	lsrs	r2, r3
 80014dc:	1e13      	subs	r3, r2, #0
 80014de:	d000      	beq.n	80014e2 <HAL_GPIO_Init+0x2be>
 80014e0:	e6a8      	b.n	8001234 <HAL_GPIO_Init+0x10>
  } 
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b006      	add	sp, #24
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	000a      	movs	r2, r1
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	1cba      	adds	r2, r7, #2
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	4013      	ands	r3, r2
 800151c:	d004      	beq.n	8001528 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800151e:	230f      	movs	r3, #15
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e003      	b.n	8001530 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	781b      	ldrb	r3, [r3, #0]
  }
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	0008      	movs	r0, r1
 8001548:	0011      	movs	r1, r2
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	1c7b      	adds	r3, r7, #1
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001556:	1c7b      	adds	r3, r7, #1
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155e:	1cbb      	adds	r3, r7, #2
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001566:	e003      	b.n	8001570 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001568:	1cbb      	adds	r3, r7, #2
 800156a:	881a      	ldrh	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e082      	b.n	8001690 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2241      	movs	r2, #65	; 0x41
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff f9ab 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2241      	movs	r2, #65	; 0x41
 80015aa:	2124      	movs	r1, #36	; 0x24
 80015ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	438a      	bics	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_I2C_Init+0x120>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4931      	ldr	r1, [pc, #196]	; (800169c <HAL_I2C_Init+0x124>)
 80015d8:	400a      	ands	r2, r1
 80015da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	0209      	lsls	r1, r1, #8
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e007      	b.n	8001606 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2184      	movs	r1, #132	; 0x84
 8001600:	0209      	lsls	r1, r1, #8
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d104      	bne.n	8001618 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	491f      	ldr	r1, [pc, #124]	; (80016a0 <HAL_I2C_Init+0x128>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	491a      	ldr	r1, [pc, #104]	; (800169c <HAL_I2C_Init+0x124>)
 8001634:	400a      	ands	r2, r1
 8001636:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	431a      	orrs	r2, r3
 8001642:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69d9      	ldr	r1, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2241      	movs	r2, #65	; 0x41
 800167c:	2120      	movs	r1, #32
 800167e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2242      	movs	r2, #66	; 0x42
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}
 8001698:	f0ffffff 	.word	0xf0ffffff
 800169c:	ffff7fff 	.word	0xffff7fff
 80016a0:	02008000 	.word	0x02008000

080016a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	000c      	movs	r4, r1
 80016ae:	0010      	movs	r0, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	230a      	movs	r3, #10
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	1c22      	adds	r2, r4, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	2308      	movs	r3, #8
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	1c02      	adds	r2, r0, #0
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	1c0a      	adds	r2, r1, #0
 80016c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2241      	movs	r2, #65	; 0x41
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d000      	beq.n	80016d6 <HAL_I2C_Mem_Read+0x32>
 80016d4:	e110      	b.n	80018f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_I2C_Mem_Read+0x42>
 80016dc:	232c      	movs	r3, #44	; 0x2c
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e103      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	5c9b      	ldrb	r3, [r3, r2]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_I2C_Mem_Read+0x5c>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e0fc      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	2101      	movs	r1, #1
 8001706:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001708:	f7ff fb0c 	bl	8000d24 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	0219      	lsls	r1, r3, #8
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2319      	movs	r3, #25
 800171c:	2201      	movs	r2, #1
 800171e:	f000 f979 	bl	8001a14 <I2C_WaitOnFlagUntilTimeout>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0e7      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2241      	movs	r2, #65	; 0x41
 800172e:	2122      	movs	r1, #34	; 0x22
 8001730:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2242      	movs	r2, #66	; 0x42
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	222c      	movs	r2, #44	; 0x2c
 800174a:	18ba      	adds	r2, r7, r2
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001756:	1dbb      	adds	r3, r7, #6
 8001758:	881c      	ldrh	r4, [r3, #0]
 800175a:	2308      	movs	r3, #8
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	230a      	movs	r3, #10
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	0023      	movs	r3, r4
 8001772:	f000 f8cb 	bl	800190c <I2C_RequestMemoryRead>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d005      	beq.n	8001786 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	2100      	movs	r1, #0
 8001780:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0b9      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	2bff      	cmp	r3, #255	; 0xff
 800178e:	d911      	bls.n	80017b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	22ff      	movs	r2, #255	; 0xff
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	b2da      	uxtb	r2, r3
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	045c      	lsls	r4, r3, #17
 80017a0:	230a      	movs	r3, #10
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	8819      	ldrh	r1, [r3, #0]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_I2C_Mem_Read+0x260>)
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	0023      	movs	r3, r4
 80017ae:	f000 fa65 	bl	8001c7c <I2C_TransferConfig>
 80017b2:	e012      	b.n	80017da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	049c      	lsls	r4, r3, #18
 80017c8:	230a      	movs	r3, #10
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	8819      	ldrh	r1, [r3, #0]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <HAL_I2C_Mem_Read+0x260>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	0023      	movs	r3, r4
 80017d6:	f000 fa51 	bl	8001c7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	0013      	movs	r3, r2
 80017e4:	2200      	movs	r2, #0
 80017e6:	2104      	movs	r1, #4
 80017e8:	f000 f914 	bl	8001a14 <I2C_WaitOnFlagUntilTimeout>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e082      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d03a      	beq.n	80018a6 <HAL_I2C_Mem_Read+0x202>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d136      	bne.n	80018a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	0013      	movs	r3, r2
 8001842:	2200      	movs	r2, #0
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	f000 f8e5 	bl	8001a14 <I2C_WaitOnFlagUntilTimeout>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e053      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2bff      	cmp	r3, #255	; 0xff
 800185a:	d911      	bls.n	8001880 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	045c      	lsls	r4, r3, #17
 800186c:	230a      	movs	r3, #10
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0023      	movs	r3, r4
 800187a:	f000 f9ff 	bl	8001c7c <I2C_TransferConfig>
 800187e:	e012      	b.n	80018a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	b2da      	uxtb	r2, r3
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	049c      	lsls	r4, r3, #18
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	8819      	ldrh	r1, [r3, #0]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	0023      	movs	r3, r4
 80018a2:	f000 f9eb 	bl	8001c7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d194      	bne.n	80017da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f92a 	bl	8001b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2220      	movs	r2, #32
 80018ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <HAL_I2C_Mem_Read+0x264>)
 80018d8:	400a      	ands	r2, r1
 80018da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2242      	movs	r2, #66	; 0x42
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b007      	add	sp, #28
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	80002400 	.word	0x80002400
 8001908:	fe00e800 	.word	0xfe00e800

0800190c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800190c:	b5b0      	push	{r4, r5, r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	000c      	movs	r4, r1
 8001916:	0010      	movs	r0, r2
 8001918:	0019      	movs	r1, r3
 800191a:	250a      	movs	r5, #10
 800191c:	197b      	adds	r3, r7, r5
 800191e:	1c22      	adds	r2, r4, #0
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	2308      	movs	r3, #8
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	1c02      	adds	r2, r0, #0
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	1c0a      	adds	r2, r1, #0
 800192e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	197b      	adds	r3, r7, r5
 8001938:	8819      	ldrh	r1, [r3, #0]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <I2C_RequestMemoryRead+0xc0>)
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	f000 f99b 	bl	8001c7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	0018      	movs	r0, r3
 800194e:	f000 f8a0 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e033      	b.n	80019c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800195a:	1dbb      	adds	r3, r7, #6
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001962:	2308      	movs	r3, #8
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
 8001970:	e019      	b.n	80019a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001972:	2308      	movs	r3, #8
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	6a39      	ldr	r1, [r7, #32]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f881 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e014      	b.n	80019c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001998:	2308      	movs	r3, #8
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019a6:	6a3a      	ldr	r2, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	0013      	movs	r3, r2
 80019b0:	2200      	movs	r2, #0
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	f000 f82e 	bl	8001a14 <I2C_WaitOnFlagUntilTimeout>
 80019b8:	1e03      	subs	r3, r0, #0
 80019ba:	d001      	beq.n	80019c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	80002000 	.word	0x80002000

080019d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d103      	bne.n	80019ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d007      	beq.n	8001a0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	619a      	str	r2, [r3, #24]
  }
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a24:	e021      	b.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	d01e      	beq.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2c:	f7ff f97a 	bl	8000d24 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d302      	bcc.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	2220      	movs	r2, #32
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2241      	movs	r2, #65	; 0x41
 8001a52:	2120      	movs	r1, #32
 8001a54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2242      	movs	r2, #66	; 0x42
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	425a      	negs	r2, r3
 8001a7a:	4153      	adcs	r3, r2
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	001a      	movs	r2, r3
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d0ce      	beq.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a9e:	e02b      	b.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f86e 	bl	8001b88 <I2C_IsAcknowledgeFailed>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d001      	beq.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e029      	b.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	d01e      	beq.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7ff f933 	bl	8000d24 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d113      	bne.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2241      	movs	r2, #65	; 0x41
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2242      	movs	r2, #66	; 0x42
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e007      	b.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d1cc      	bne.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b1c:	e028      	b.n	8001b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f82f 	bl	8001b88 <I2C_IsAcknowledgeFailed>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e026      	b.n	8001b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b32:	f7ff f8f7 	bl	8000d24 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d302      	bcc.n	8001b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d113      	bne.n	8001b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2241      	movs	r2, #65	; 0x41
 8001b58:	2120      	movs	r1, #32
 8001b5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2242      	movs	r2, #66	; 0x42
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e007      	b.n	8001b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2220      	movs	r2, #32
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d1cf      	bne.n	8001b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b004      	add	sp, #16
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d164      	bne.n	8001c6c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	049b      	lsls	r3, r3, #18
 8001bac:	401a      	ands	r2, r3
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	049b      	lsls	r3, r3, #18
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d02b      	beq.n	8001c0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	01c9      	lsls	r1, r1, #7
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc8:	e021      	b.n	8001c0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	d01e      	beq.n	8001c0e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff f8a8 	bl	8000d24 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_IsAcknowledgeFailed+0x5e>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d113      	bne.n	8001c0e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	2220      	movs	r2, #32
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2241      	movs	r2, #65	; 0x41
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2242      	movs	r2, #66	; 0x42
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	2100      	movs	r1, #0
 8001c08:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02f      	b.n	8001c6e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2220      	movs	r2, #32
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d1d6      	bne.n	8001bca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fece 	bl	80019d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <I2C_IsAcknowledgeFailed+0xf0>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	2204      	movs	r2, #4
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2241      	movs	r2, #65	; 0x41
 8001c54:	2120      	movs	r1, #32
 8001c56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2242      	movs	r2, #66	; 0x42
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	fe00e800 	.word	0xfe00e800

08001c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	0008      	movs	r0, r1
 8001c86:	0011      	movs	r1, r2
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	240a      	movs	r4, #10
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	1c02      	adds	r2, r0, #0
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	2009      	movs	r0, #9
 8001c94:	183b      	adds	r3, r7, r0
 8001c96:	1c0a      	adds	r2, r1, #0
 8001c98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	0d51      	lsrs	r1, r2, #21
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	400a      	ands	r2, r1
 8001caa:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <I2C_TransferConfig+0x68>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	43d2      	mvns	r2, r2
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	0011      	movs	r1, r2
 8001cb4:	193b      	adds	r3, r7, r4
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	059b      	lsls	r3, r3, #22
 8001cba:	0d9a      	lsrs	r2, r3, #22
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	0418      	lsls	r0, r3, #16
 8001cc2:	23ff      	movs	r3, #255	; 0xff
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	4003      	ands	r3, r0
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b005      	add	sp, #20
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	03ff63ff 	.word	0x03ff63ff

08001ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2241      	movs	r2, #65	; 0x41
 8001cf6:	5c9b      	ldrb	r3, [r3, r2]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d138      	bne.n	8001d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e032      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	2101      	movs	r1, #1
 8001d12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2241      	movs	r2, #65	; 0x41
 8001d18:	2124      	movs	r1, #36	; 0x24
 8001d1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4911      	ldr	r1, [pc, #68]	; (8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	2120      	movs	r1, #32
 8001d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	ffffefff 	.word	0xffffefff

08001d80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2241      	movs	r2, #65	; 0x41
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d139      	bne.n	8001e0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	5c9b      	ldrb	r3, [r3, r2]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e033      	b.n	8001e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	2101      	movs	r1, #1
 8001daa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2241      	movs	r2, #65	; 0x41
 8001db0:	2124      	movs	r1, #36	; 0x24
 8001db2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2241      	movs	r2, #65	; 0x41
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2240      	movs	r2, #64	; 0x40
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	fffff0ff 	.word	0xfffff0ff

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e301      	b.n	800242e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1e>
 8001e34:	e08d      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e36:	4bc3      	ldr	r3, [pc, #780]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d00e      	beq.n	8001e60 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e42:	4bc0      	ldr	r3, [pc, #768]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	220c      	movs	r2, #12
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64>
 8001e4e:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	401a      	ands	r2, r3
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10d      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4bb8      	ldr	r3, [pc, #736]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x56>
 8001e6c:	e070      	b.n	8001f50 <HAL_RCC_OscConfig+0x138>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d000      	beq.n	8001e78 <HAL_RCC_OscConfig+0x60>
 8001e76:	e06b      	b.n	8001f50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2d8      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x7c>
 8001e84:	4baf      	ldr	r3, [pc, #700]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4bae      	ldr	r3, [pc, #696]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0249      	lsls	r1, r1, #9
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e02f      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x9e>
 8001e9c:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	49a9      	ldr	r1, [pc, #676]	; (8002148 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4ba6      	ldr	r3, [pc, #664]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4ba5      	ldr	r3, [pc, #660]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	49a7      	ldr	r1, [pc, #668]	; (800214c <HAL_RCC_OscConfig+0x334>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e01e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10e      	bne.n	8001edc <HAL_RCC_OscConfig+0xc4>
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4ba0      	ldr	r3, [pc, #640]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	02c9      	lsls	r1, r1, #11
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	4b9d      	ldr	r3, [pc, #628]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b9c      	ldr	r3, [pc, #624]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0249      	lsls	r1, r1, #9
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001edc:	4b99      	ldr	r3, [pc, #612]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b98      	ldr	r3, [pc, #608]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	4999      	ldr	r1, [pc, #612]	; (8002148 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b95      	ldr	r3, [pc, #596]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eee:	4997      	ldr	r1, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x334>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff12 	bl	8000d24 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f06:	f7fe ff0d 	bl	8000d24 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e28a      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0xee>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fefd 	bl	8000d24 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fef8 	bl	8000d24 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e275      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	029b      	lsls	r3, r3, #10
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x118>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCC_OscConfig+0x146>
 8001f5c:	e069      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f68:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d11c      	bne.n	8001fae <HAL_RCC_OscConfig+0x196>
 8001f74:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e24b      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22f8      	movs	r2, #248	; 0xf8
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00da      	lsls	r2, r3, #3
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fac:	e041      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe feaf 	bl	8000d24 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe feaa 	bl	8000d24 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e227      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f1      	beq.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b56      	ldr	r3, [pc, #344]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22f8      	movs	r2, #248	; 0xf8
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e018      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fe8a 	bl	8000d24 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe fe85 	bl	8000d24 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e202      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d1f1      	bne.n	8002016 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d036      	beq.n	80020aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fe68 	bl	8000d24 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fe63 	bl	8000d24 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1e0      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2202      	movs	r2, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d0f1      	beq.n	800205a <HAL_RCC_OscConfig+0x242>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fe4e 	bl	8000d24 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7fe fe49 	bl	8000d24 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1c6      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
 80020b2:	d100      	bne.n	80020b6 <HAL_RCC_OscConfig+0x29e>
 80020b4:	e0b4      	b.n	8002220 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	201f      	movs	r0, #31
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	4013      	ands	r3, r2
 80020c8:	d110      	bne.n	80020ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0549      	lsls	r1, r1, #21
 80020d4:	430a      	orrs	r2, r1
 80020d6:	61da      	str	r2, [r3, #28]
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	055b      	lsls	r3, r3, #21
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d11a      	bne.n	800212e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0049      	lsls	r1, r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe fe0d 	bl	8000d24 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fe08 	bl	8000d24 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e185      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <HAL_RCC_OscConfig+0x33c>
 8002136:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	4b02      	ldr	r3, [pc, #8]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	e035      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002144:	40021000 	.word	0x40021000
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	fffbffff 	.word	0xfffbffff
 8002150:	40007000 	.word	0x40007000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x35e>
 800215c:	4bb6      	ldr	r3, [pc, #728]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	4bb5      	ldr	r3, [pc, #724]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	621a      	str	r2, [r3, #32]
 8002168:	4bb3      	ldr	r3, [pc, #716]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	4bb2      	ldr	r3, [pc, #712]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800216e:	2104      	movs	r1, #4
 8002170:	438a      	bics	r2, r1
 8002172:	621a      	str	r2, [r3, #32]
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x380>
 800217e:	4bae      	ldr	r3, [pc, #696]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4bad      	ldr	r3, [pc, #692]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002184:	2104      	movs	r1, #4
 8002186:	430a      	orrs	r2, r1
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	4bab      	ldr	r3, [pc, #684]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	4baa      	ldr	r3, [pc, #680]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002190:	2101      	movs	r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002198:	4ba7      	ldr	r3, [pc, #668]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4ba6      	ldr	r3, [pc, #664]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4ba3      	ldr	r3, [pc, #652]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	438a      	bics	r2, r1
 80021ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d014      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fdb4 	bl	8000d24 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe fdaf 	bl	8000d24 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4a9b      	ldr	r2, [pc, #620]	; (800243c <HAL_RCC_OscConfig+0x624>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e12b      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b98      	ldr	r3, [pc, #608]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
 80021e0:	e013      	b.n	800220a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fd9f 	bl	8000d24 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e009      	b.n	8002200 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fd9a 	bl	8000d24 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a91      	ldr	r2, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x624>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e116      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800221a:	4989      	ldr	r1, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x628>)
 800221c:	400a      	ands	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12a      	bne.n	8002288 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002232:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002236:	4b80      	ldr	r3, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002238:	2104      	movs	r1, #4
 800223a:	430a      	orrs	r2, r1
 800223c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800223e:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002242:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002244:	2101      	movs	r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe fd6b 	bl	8000d24 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002254:	f7fe fd66 	bl	8000d24 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0e3      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002266:	4b74      	ldr	r3, [pc, #464]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d0f1      	beq.n	8002254 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002270:	4b71      	ldr	r3, [pc, #452]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	22f8      	movs	r2, #248	; 0xf8
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	00da      	lsls	r2, r3, #3
 8002280:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
 8002286:	e034      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	3305      	adds	r3, #5
 800228e:	d111      	bne.n	80022b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002296:	2104      	movs	r1, #4
 8002298:	438a      	bics	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	22f8      	movs	r2, #248	; 0xf8
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	00da      	lsls	r2, r3, #3
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	e01e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b8:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2104      	movs	r1, #4
 80022bc:	430a      	orrs	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022c0:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c4:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	438a      	bics	r2, r1
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fd2a 	bl	8000d24 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022d6:	f7fe fd25 	bl	8000d24 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0a2      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f1      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x4e4>
 80022fa:	e097      	b.n	800242c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	220c      	movs	r2, #12
 8002302:	4013      	ands	r3, r2
 8002304:	2b08      	cmp	r3, #8
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x4f2>
 8002308:	e06b      	b.n	80023e2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d14c      	bne.n	80023ac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b48      	ldr	r3, [pc, #288]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002318:	494a      	ldr	r1, [pc, #296]	; (8002444 <HAL_RCC_OscConfig+0x62c>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fd01 	bl	8000d24 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fcfc 	bl	8000d24 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e079      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	220f      	movs	r2, #15
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0x630>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	431a      	orrs	r2, r3
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0449      	lsls	r1, r1, #17
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fccf 	bl	8000d24 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fcca 	bl	8000d24 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e047      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x574>
 80023aa:	e03f      	b.n	800242c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023b2:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x62c>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fcb4 	bl	8000d24 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fcaf 	bl	8000d24 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e02c      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5aa>
 80023e0:	e024      	b.n	800242c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01f      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	025b      	lsls	r3, r3, #9
 8002400:	401a      	ands	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	429a      	cmp	r2, r3
 8002408:	d10e      	bne.n	8002428 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	220f      	movs	r2, #15
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	23f0      	movs	r3, #240	; 0xf0
 800241c:	039b      	lsls	r3, r3, #14
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b008      	add	sp, #32
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	00001388 	.word	0x00001388
 8002440:	efffffff 	.word	0xefffffff
 8002444:	feffffff 	.word	0xfeffffff
 8002448:	ffc2ffff 	.word	0xffc2ffff

0800244c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b3      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d911      	bls.n	8002492 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e09a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d015      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d006      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024ac:	21e0      	movs	r1, #224	; 0xe0
 80024ae:	00c9      	lsls	r1, r1, #3
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	22f0      	movs	r2, #240	; 0xf0
 80024ba:	4393      	bics	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	4013      	ands	r3, r2
 80024e4:	d114      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06e      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	4013      	ands	r3, r2
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e062      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e05b      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe fbfe 	bl	8000d24 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252c:	e009      	b.n	8002542 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7fe fbf9 	bl	8000d24 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x18c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e042      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	220c      	movs	r2, #12
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ec      	bne.n	800252e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d211      	bcs.n	8002586 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	4393      	bics	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e020      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2204      	movs	r2, #4
 800258c:	4013      	ands	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_RCC_ClockConfig+0x190>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025a4:	f000 f820 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a8:	0001      	movs	r1, r0
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	220f      	movs	r2, #15
 80025b2:	4013      	ands	r3, r2
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x194>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	000a      	movs	r2, r1
 80025ba:	40da      	lsrs	r2, r3
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x198>)
 80025be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7fe fb69 	bl	8000c98 <HAL_InitTick>
  
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	00001388 	.word	0x00001388
 80025dc:	fffff8ff 	.word	0xfffff8ff
 80025e0:	08004ae8 	.word	0x08004ae8
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b08f      	sub	sp, #60	; 0x3c
 80025ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025ee:	2314      	movs	r3, #20
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025f6:	c313      	stmia	r3!, {r0, r1, r4}
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002602:	c313      	stmia	r3!, {r0, r1, r4}
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b04      	cmp	r3, #4
 800262a:	d002      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x4a>
 800262c:	2b08      	cmp	r3, #8
 800262e:	d003      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x50>
 8002630:	e02d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002636:	e02d      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	220f      	movs	r2, #15
 800263e:	4013      	ands	r3, r2
 8002640:	2214      	movs	r2, #20
 8002642:	18ba      	adds	r2, r7, r2
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	220f      	movs	r2, #15
 800264e:	4013      	ands	r3, r2
 8002650:	1d3a      	adds	r2, r7, #4
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	4013      	ands	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002662:	4812      	ldr	r0, [pc, #72]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002664:	f7fd fd5a 	bl	800011c <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	001a      	movs	r2, r3
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	4353      	muls	r3, r2
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
 8002672:	e009      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002676:	000a      	movs	r2, r1
 8002678:	0152      	lsls	r2, r2, #5
 800267a:	1a52      	subs	r2, r2, r1
 800267c:	0193      	lsls	r3, r2, #6
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	185b      	adds	r3, r3, r1
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002692:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b00f      	add	sp, #60	; 0x3c
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	08004ac8 	.word	0x08004ac8
 80026a4:	08004ad8 	.word	0x08004ad8
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80026c8:	f7ff fff2 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026cc:	0001      	movs	r1, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	2207      	movs	r2, #7
 80026d6:	4013      	ands	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	40d9      	lsrs	r1, r3
 80026de:	000b      	movs	r3, r1
}    
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004af8 	.word	0x08004af8

080026f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	4013      	ands	r3, r2
 800270a:	d100      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800270c:	e08e      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2017      	movs	r0, #23
 8002710:	183b      	adds	r3, r7, r0
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	055b      	lsls	r3, r3, #21
 800271e:	4013      	ands	r3, r2
 8002720:	d110      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	0549      	lsls	r1, r1, #21
 800272c:	430a      	orrs	r2, r1
 800272e:	61da      	str	r2, [r3, #28]
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	055b      	lsls	r3, r3, #21
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	183b      	adds	r3, r7, r0
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d11a      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002750:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0049      	lsls	r1, r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fae1 	bl	8000d24 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7fe fadc 	bl	8000d24 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e077      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d0f0      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d034      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d02c      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a8:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a33      	ldr	r2, [pc, #204]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	0249      	lsls	r1, r1, #9
 80027bc:	430a      	orrs	r2, r1
 80027be:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c0:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c6:	492e      	ldr	r1, [pc, #184]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe faa3 	bl	8000d24 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e009      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fa9e 	bl	8000d24 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e038      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002812:	430a      	orrs	r2, r1
 8002814:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002826:	4918      	ldr	r1, [pc, #96]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002828:	400a      	ands	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	2203      	movs	r2, #3
 800283c:	4393      	bics	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002846:	430a      	orrs	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2220      	movs	r2, #32
 8002850:	4013      	ands	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2210      	movs	r2, #16
 800285a:	4393      	bics	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002864:	430a      	orrs	r2, r1
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
 800287c:	fffffcff 	.word	0xfffffcff
 8002880:	fffeffff 	.word	0xfffeffff
 8002884:	00001388 	.word	0x00001388
 8002888:	efffffff 	.word	0xefffffff

0800288c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e044      	b.n	8002928 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2274      	movs	r2, #116	; 0x74
 80028aa:	2100      	movs	r1, #0
 80028ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe f871 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2224      	movs	r2, #36	; 0x24
 80028ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	438a      	bics	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f95e 	bl	8002b90 <UART_SetConfig>
 80028d4:	0003      	movs	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e024      	b.n	8002928 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fa91 	bl	8002e10 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	490d      	ldr	r1, [pc, #52]	; (8002930 <HAL_UART_Init+0xa4>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2108      	movs	r1, #8
 800290a:	438a      	bics	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 fb29 	bl	8002f78 <UART_CheckIdleState>
 8002926:	0003      	movs	r3, r0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fffff7ff 	.word	0xfffff7ff

08002934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	1dbb      	adds	r3, r7, #6
 8002942:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002948:	2b20      	cmp	r3, #32
 800294a:	d000      	beq.n	800294e <HAL_UART_Transmit+0x1a>
 800294c:	e096      	b.n	8002a7c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_UART_Transmit+0x28>
 8002954:	1dbb      	adds	r3, r7, #6
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e08e      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	015b      	lsls	r3, r3, #5
 8002968:	429a      	cmp	r2, r3
 800296a:	d109      	bne.n	8002980 <HAL_UART_Transmit+0x4c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e07e      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2274      	movs	r2, #116	; 0x74
 8002984:	5c9b      	ldrb	r3, [r3, r2]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Transmit+0x5a>
 800298a:	2302      	movs	r3, #2
 800298c:	e077      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2274      	movs	r2, #116	; 0x74
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	2100      	movs	r1, #0
 800299c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a4:	f7fe f9be 	bl	8000d24 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1dba      	adds	r2, r7, #6
 80029b0:	2150      	movs	r1, #80	; 0x50
 80029b2:	8812      	ldrh	r2, [r2, #0]
 80029b4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1dba      	adds	r2, r7, #6
 80029ba:	2152      	movs	r1, #82	; 0x52
 80029bc:	8812      	ldrh	r2, [r2, #0]
 80029be:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d108      	bne.n	80029de <HAL_UART_Transmit+0xaa>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	e003      	b.n	80029e6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2274      	movs	r2, #116	; 0x74
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80029ee:	e02d      	b.n	8002a4c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	0013      	movs	r3, r2
 80029fa:	2200      	movs	r2, #0
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	f000 fb03 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e039      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	05d2      	lsls	r2, r2, #23
 8002a1a:	0dd2      	lsrs	r2, r2, #23
 8002a1c:	b292      	uxth	r2, r2
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	3302      	adds	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e008      	b.n	8002a3a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b292      	uxth	r2, r2
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2252      	movs	r2, #82	; 0x52
 8002a3e:	5a9b      	ldrh	r3, [r3, r2]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b299      	uxth	r1, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2252      	movs	r2, #82	; 0x52
 8002a4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2252      	movs	r2, #82	; 0x52
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1cb      	bne.n	80029f0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	0013      	movs	r3, r2
 8002a62:	2200      	movs	r2, #0
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	f000 facf 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e005      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b008      	add	sp, #32
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	1dbb      	adds	r3, r7, #6
 8002a92:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d150      	bne.n	8002b3e <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_UART_Receive_DMA+0x24>
 8002aa2:	1dbb      	adds	r3, r7, #6
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e048      	b.n	8002b40 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d109      	bne.n	8002ace <HAL_UART_Receive_DMA+0x48>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e038      	b.n	8002b40 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2274      	movs	r2, #116	; 0x74
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_UART_Receive_DMA+0x56>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e031      	b.n	8002b40 <HAL_UART_Receive_DMA+0xba>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2274      	movs	r2, #116	; 0x74
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	4013      	ands	r3, r2
 8002af6:	d019      	beq.n	8002b2c <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	613b      	str	r3, [r7, #16]
  return(result);
 8002afe:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	04c9      	lsls	r1, r1, #19
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b2c:	1dbb      	adds	r3, r7, #6
 8002b2e:	881a      	ldrh	r2, [r3, #0]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 fb2b 	bl	8003190 <UART_Start_Receive_DMA>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	e000      	b.n	8002b40 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b008      	add	sp, #32
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	000a      	movs	r2, r1
 8002b82:	1cbb      	adds	r3, r7, #2
 8002b84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b98:	231e      	movs	r3, #30
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8d      	ldr	r2, [pc, #564]	; (8002df4 <UART_SetConfig+0x264>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a88      	ldr	r2, [pc, #544]	; (8002df8 <UART_SetConfig+0x268>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a7f      	ldr	r2, [pc, #508]	; (8002dfc <UART_SetConfig+0x26c>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7b      	ldr	r2, [pc, #492]	; (8002e00 <UART_SetConfig+0x270>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d127      	bne.n	8002c66 <UART_SetConfig+0xd6>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <UART_SetConfig+0x274>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d00d      	beq.n	8002c3e <UART_SetConfig+0xae>
 8002c22:	d81b      	bhi.n	8002c5c <UART_SetConfig+0xcc>
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d014      	beq.n	8002c52 <UART_SetConfig+0xc2>
 8002c28:	d818      	bhi.n	8002c5c <UART_SetConfig+0xcc>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <UART_SetConfig+0xa4>
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d00a      	beq.n	8002c48 <UART_SetConfig+0xb8>
 8002c32:	e013      	b.n	8002c5c <UART_SetConfig+0xcc>
 8002c34:	231f      	movs	r3, #31
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e021      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e01c      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c48:	231f      	movs	r3, #31
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e017      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c52:	231f      	movs	r3, #31
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2208      	movs	r2, #8
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e012      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c5c:	231f      	movs	r3, #31
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2210      	movs	r2, #16
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e00d      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <UART_SetConfig+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d104      	bne.n	8002c7a <UART_SetConfig+0xea>
 8002c70:	231f      	movs	r3, #31
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e003      	b.n	8002c82 <UART_SetConfig+0xf2>
 8002c7a:	231f      	movs	r3, #31
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2210      	movs	r2, #16
 8002c80:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d15d      	bne.n	8002d4a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002c8e:	231f      	movs	r3, #31
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d015      	beq.n	8002cc4 <UART_SetConfig+0x134>
 8002c98:	dc18      	bgt.n	8002ccc <UART_SetConfig+0x13c>
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d00d      	beq.n	8002cba <UART_SetConfig+0x12a>
 8002c9e:	dc15      	bgt.n	8002ccc <UART_SetConfig+0x13c>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <UART_SetConfig+0x11a>
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d005      	beq.n	8002cb4 <UART_SetConfig+0x124>
 8002ca8:	e010      	b.n	8002ccc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002caa:	f7ff fd0b 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	61bb      	str	r3, [r7, #24]
        break;
 8002cb2:	e012      	b.n	8002cda <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <UART_SetConfig+0x27c>)
 8002cb6:	61bb      	str	r3, [r7, #24]
        break;
 8002cb8:	e00f      	b.n	8002cda <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cba:	f7ff fc95 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]
        break;
 8002cc2:	e00a      	b.n	8002cda <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	61bb      	str	r3, [r7, #24]
        break;
 8002cca:	e006      	b.n	8002cda <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cd0:	231e      	movs	r3, #30
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
        break;
 8002cd8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d100      	bne.n	8002ce2 <UART_SetConfig+0x152>
 8002ce0:	e07b      	b.n	8002dda <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	005a      	lsls	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	18d2      	adds	r2, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	f7fd fa11 	bl	800011c <__udivsi3>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	d91c      	bls.n	8002d40 <UART_SetConfig+0x1b0>
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d217      	bcs.n	8002d40 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	200e      	movs	r0, #14
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	210f      	movs	r1, #15
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2207      	movs	r2, #7
 8002d26:	4013      	ands	r3, r2
 8002d28:	b299      	uxth	r1, r3
 8002d2a:	183b      	adds	r3, r7, r0
 8002d2c:	183a      	adds	r2, r7, r0
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	183a      	adds	r2, r7, r0
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e04c      	b.n	8002dda <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002d40:	231e      	movs	r3, #30
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e047      	b.n	8002dda <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d4a:	231f      	movs	r3, #31
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d015      	beq.n	8002d80 <UART_SetConfig+0x1f0>
 8002d54:	dc18      	bgt.n	8002d88 <UART_SetConfig+0x1f8>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00d      	beq.n	8002d76 <UART_SetConfig+0x1e6>
 8002d5a:	dc15      	bgt.n	8002d88 <UART_SetConfig+0x1f8>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <UART_SetConfig+0x1d6>
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d005      	beq.n	8002d70 <UART_SetConfig+0x1e0>
 8002d64:	e010      	b.n	8002d88 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d66:	f7ff fcad 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	61bb      	str	r3, [r7, #24]
        break;
 8002d6e:	e012      	b.n	8002d96 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <UART_SetConfig+0x27c>)
 8002d72:	61bb      	str	r3, [r7, #24]
        break;
 8002d74:	e00f      	b.n	8002d96 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d76:	f7ff fc37 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	61bb      	str	r3, [r7, #24]
        break;
 8002d7e:	e00a      	b.n	8002d96 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	61bb      	str	r3, [r7, #24]
        break;
 8002d86:	e006      	b.n	8002d96 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d8c:	231e      	movs	r3, #30
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
        break;
 8002d94:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01e      	beq.n	8002dda <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	085a      	lsrs	r2, r3, #1
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	18d2      	adds	r2, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0019      	movs	r1, r3
 8002dac:	0010      	movs	r0, r2
 8002dae:	f7fd f9b5 	bl	800011c <__udivsi3>
 8002db2:	0003      	movs	r3, r0
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	d909      	bls.n	8002dd2 <UART_SetConfig+0x242>
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d204      	bcs.n	8002dd2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	e003      	b.n	8002dda <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd2:	231e      	movs	r3, #30
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002de6:	231e      	movs	r3, #30
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b008      	add	sp, #32
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	ffff69f3 	.word	0xffff69f3
 8002df8:	ffffcfff 	.word	0xffffcfff
 8002dfc:	fffff4ff 	.word	0xfffff4ff
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <UART_AdvFeatureConfig+0x144>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <UART_AdvFeatureConfig+0x148>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2204      	movs	r2, #4
 8002e62:	4013      	ands	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <UART_AdvFeatureConfig+0x14c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <UART_AdvFeatureConfig+0x150>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <UART_AdvFeatureConfig+0x154>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <UART_AdvFeatureConfig+0x158>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2240      	movs	r2, #64	; 0x40
 8002eea:	4013      	ands	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <UART_AdvFeatureConfig+0x15c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	035b      	lsls	r3, r3, #13
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d10b      	bne.n	8002f2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <UART_AdvFeatureConfig+0x160>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <UART_AdvFeatureConfig+0x164>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	fffdffff 	.word	0xfffdffff
 8002f58:	fffeffff 	.word	0xfffeffff
 8002f5c:	fffbffff 	.word	0xfffbffff
 8002f60:	ffff7fff 	.word	0xffff7fff
 8002f64:	ffffefff 	.word	0xffffefff
 8002f68:	ffffdfff 	.word	0xffffdfff
 8002f6c:	ffefffff 	.word	0xffefffff
 8002f70:	ff9fffff 	.word	0xff9fffff
 8002f74:	fff7ffff 	.word	0xfff7ffff

08002f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	2100      	movs	r1, #0
 8002f86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f88:	f7fd fecc 	bl	8000d24 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2208      	movs	r2, #8
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d10c      	bne.n	8002fb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0391      	lsls	r1, r2, #14
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4a17      	ldr	r2, [pc, #92]	; (8003004 <UART_CheckIdleState+0x8c>)
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f000 f82c 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d001      	beq.n	8002fb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e021      	b.n	8002ffc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d10c      	bne.n	8002fe0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	03d1      	lsls	r1, r2, #15
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <UART_CheckIdleState+0x8c>)
 8002fd0:	9200      	str	r2, [sp, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f000 f818 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d001      	beq.n	8002fe0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e00d      	b.n	8002ffc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2274      	movs	r2, #116	; 0x74
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	01ffffff 	.word	0x01ffffff

08003008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b094      	sub	sp, #80	; 0x50
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003018:	e0a3      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	3301      	adds	r3, #1
 800301e:	d100      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003020:	e09f      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fd fe7f 	bl	8000d24 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <UART_WaitOnFlagUntilTimeout+0x30>
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13d      	bne.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003038:	f3ef 8310 	mrs	r3, PRIMASK
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
 8003042:	2301      	movs	r3, #1
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	494c      	ldr	r1, [pc, #304]	; (800318c <UART_WaitOnFlagUntilTimeout+0x184>)
 800305a:	400a      	ands	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306a:	f3ef 8310 	mrs	r3, PRIMASK
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	643b      	str	r3, [r7, #64]	; 0x40
 8003074:	2301      	movs	r3, #1
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	438a      	bics	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2274      	movs	r2, #116	; 0x74
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e067      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d050      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	401a      	ands	r2, r3
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d146      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	613b      	str	r3, [r7, #16]
  return(result);
 80030e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	2301      	movs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4923      	ldr	r1, [pc, #140]	; (800318c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003100:	400a      	ands	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003106:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
 8003114:	61fb      	str	r3, [r7, #28]
  return(result);
 8003116:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
 800311a:	2301      	movs	r3, #1
 800311c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	438a      	bics	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	2120      	movs	r1, #32
 8003154:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2274      	movs	r2, #116	; 0x74
 800315a:	2100      	movs	r1, #0
 800315c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e010      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	425a      	negs	r2, r3
 8003172:	4153      	adcs	r3, r2
 8003174:	b2db      	uxtb	r3, r3
 8003176:	001a      	movs	r2, r3
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d100      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003180:	e74b      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b014      	add	sp, #80	; 0x50
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fffffe5f 	.word	0xfffffe5f

08003190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b090      	sub	sp, #64	; 0x40
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	1dbb      	adds	r3, r7, #6
 800319c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1dba      	adds	r2, r7, #6
 80031a8:	2158      	movs	r1, #88	; 0x58
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	2100      	movs	r1, #0
 80031b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2222      	movs	r2, #34	; 0x22
 80031ba:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02b      	beq.n	800321c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <UART_Start_Receive_DMA+0x138>)
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <UART_Start_Receive_DMA+0x13c>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <UART_Start_Receive_DMA+0x140>)
 80031da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3324      	adds	r3, #36	; 0x24
 80031ee:	0019      	movs	r1, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	001a      	movs	r2, r3
 80031f6:	1dbb      	adds	r3, r7, #6
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	f7fd fec3 	bl	8000f84 <HAL_DMA_Start_IT>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d00c      	beq.n	800321c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	2110      	movs	r1, #16
 8003208:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2274      	movs	r2, #116	; 0x74
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e050      	b.n	80032be <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2274      	movs	r2, #116	; 0x74
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	613b      	str	r3, [r7, #16]
  return(result);
 800322a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	0049      	lsls	r1, r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f383 8810 	msr	PRIMASK, r3
}
 8003256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003258:	f3ef 8310 	mrs	r3, PRIMASK
 800325c:	61fb      	str	r3, [r7, #28]
  return(result);
 800325e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003260:	63bb      	str	r3, [r7, #56]	; 0x38
 8003262:	2301      	movs	r3, #1
 8003264:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
 8003294:	2301      	movs	r3, #1
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b010      	add	sp, #64	; 0x40
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	080033e1 	.word	0x080033e1
 80032cc:	08003505 	.word	0x08003505
 80032d0:	08003541 	.word	0x08003541

080032d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	2301      	movs	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	21c0      	movs	r1, #192	; 0xc0
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	; 0x38
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	617b      	str	r3, [r7, #20]
  return(result);
 800332a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4925      	ldr	r1, [pc, #148]	; (80033dc <UART_EndRxTransfer+0xc0>)
 8003346:	400a      	ands	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	623b      	str	r3, [r7, #32]
  return(result);
 800335c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
 8003360:	2301      	movs	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	438a      	bics	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003390:	f3ef 8310 	mrs	r3, PRIMASK
 8003394:	60bb      	str	r3, [r7, #8]
  return(result);
 8003396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339a:	2301      	movs	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2110      	movs	r1, #16
 80033b2:	438a      	bics	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b00e      	add	sp, #56	; 0x38
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	fffffedf 	.word	0xfffffedf

080033e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b094      	sub	sp, #80	; 0x50
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d06e      	beq.n	80034d4 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	225a      	movs	r2, #90	; 0x5a
 80033fa:	2100      	movs	r1, #0
 80033fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	61bb      	str	r3, [r7, #24]
  return(result);
 8003404:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
 8003408:	2301      	movs	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4938      	ldr	r1, [pc, #224]	; (8003500 <UART_DMAReceiveCplt+0x120>)
 8003420:	400a      	ands	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003430:	f3ef 8310 	mrs	r3, PRIMASK
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
 800343a:	2301      	movs	r3, #1
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	438a      	bics	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	438a      	bics	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003496:	2220      	movs	r2, #32
 8003498:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d118      	bne.n	80034d4 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034a8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	2301      	movs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2110      	movs	r1, #16
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d108      	bne.n	80034ee <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034de:	2258      	movs	r2, #88	; 0x58
 80034e0:	5a9a      	ldrh	r2, [r3, r2]
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	0011      	movs	r1, r2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7ff fb46 	bl	8002b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034ec:	e003      	b.n	80034f6 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80034ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fb29 	bl	8002b48 <HAL_UART_RxCpltCallback>
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b014      	add	sp, #80	; 0x50
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	fffffeff 	.word	0xfffffeff

08003504 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10a      	bne.n	8003530 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2258      	movs	r2, #88	; 0x58
 800351e:	5a9b      	ldrh	r3, [r3, r2]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	0011      	movs	r1, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fb25 	bl	8002b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800352e:	e003      	b.n	8003538 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff fb10 	bl	8002b58 <HAL_UART_RxHalfCpltCallback>
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003558:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	4013      	ands	r3, r2
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d10a      	bne.n	800357e <UART_DMAError+0x3e>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b21      	cmp	r3, #33	; 0x21
 800356c:	d107      	bne.n	800357e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2252      	movs	r2, #82	; 0x52
 8003572:	2100      	movs	r1, #0
 8003574:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff feab 	bl	80032d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	4013      	ands	r3, r2
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d10a      	bne.n	80035a2 <UART_DMAError+0x62>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b22      	cmp	r3, #34	; 0x22
 8003590:	d107      	bne.n	80035a2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	225a      	movs	r2, #90	; 0x5a
 8003596:	2100      	movs	r1, #0
 8003598:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff febd 	bl	800331c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	589b      	ldr	r3, [r3, r2]
 80035a8:	2210      	movs	r2, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fad7 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b006      	add	sp, #24
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <atoi>:
 80035c2:	b510      	push	{r4, lr}
 80035c4:	220a      	movs	r2, #10
 80035c6:	2100      	movs	r1, #0
 80035c8:	f000 f9d6 	bl	8003978 <strtol>
 80035cc:	bd10      	pop	{r4, pc}
	...

080035d0 <__errno>:
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <__errno+0x8>)
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	4770      	bx	lr
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	2000000c 	.word	0x2000000c

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	2600      	movs	r6, #0
 80035e0:	4d0c      	ldr	r5, [pc, #48]	; (8003614 <__libc_init_array+0x38>)
 80035e2:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	2600      	movs	r6, #0
 80035ee:	f001 f9dd 	bl	80049ac <_init>
 80035f2:	4d0a      	ldr	r5, [pc, #40]	; (800361c <__libc_init_array+0x40>)
 80035f4:	4c0a      	ldr	r4, [pc, #40]	; (8003620 <__libc_init_array+0x44>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	00b3      	lsls	r3, r6, #2
 8003602:	58eb      	ldr	r3, [r5, r3]
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	00b3      	lsls	r3, r6, #2
 800360c:	58eb      	ldr	r3, [r5, r3]
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08004d50 	.word	0x08004d50
 8003618:	08004d50 	.word	0x08004d50
 800361c:	08004d50 	.word	0x08004d50
 8003620:	08004d54 	.word	0x08004d54

08003624 <memset>:
 8003624:	0003      	movs	r3, r0
 8003626:	1882      	adds	r2, r0, r2
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	7019      	strb	r1, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <iprintf>:
 8003634:	b40f      	push	{r0, r1, r2, r3}
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <iprintf+0x30>)
 8003638:	b513      	push	{r0, r1, r4, lr}
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	2c00      	cmp	r4, #0
 800363e:	d005      	beq.n	800364c <iprintf+0x18>
 8003640:	69a3      	ldr	r3, [r4, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <iprintf+0x18>
 8003646:	0020      	movs	r0, r4
 8003648:	f000 fbbc 	bl	8003dc4 <__sinit>
 800364c:	ab05      	add	r3, sp, #20
 800364e:	0020      	movs	r0, r4
 8003650:	9a04      	ldr	r2, [sp, #16]
 8003652:	68a1      	ldr	r1, [r4, #8]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	f000 fdaf 	bl	80041b8 <_vfiprintf_r>
 800365a:	bc16      	pop	{r1, r2, r4}
 800365c:	bc08      	pop	{r3}
 800365e:	b004      	add	sp, #16
 8003660:	4718      	bx	r3
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	2000000c 	.word	0x2000000c

08003668 <_puts_r>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	0005      	movs	r5, r0
 800366c:	000e      	movs	r6, r1
 800366e:	2800      	cmp	r0, #0
 8003670:	d004      	beq.n	800367c <_puts_r+0x14>
 8003672:	6983      	ldr	r3, [r0, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <_puts_r+0x14>
 8003678:	f000 fba4 	bl	8003dc4 <__sinit>
 800367c:	69ab      	ldr	r3, [r5, #24]
 800367e:	68ac      	ldr	r4, [r5, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <_puts_r+0x22>
 8003684:	0028      	movs	r0, r5
 8003686:	f000 fb9d 	bl	8003dc4 <__sinit>
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <_puts_r+0xd8>)
 800368c:	429c      	cmp	r4, r3
 800368e:	d122      	bne.n	80036d6 <_puts_r+0x6e>
 8003690:	686c      	ldr	r4, [r5, #4]
 8003692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003694:	07db      	lsls	r3, r3, #31
 8003696:	d405      	bmi.n	80036a4 <_puts_r+0x3c>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	059b      	lsls	r3, r3, #22
 800369c:	d402      	bmi.n	80036a4 <_puts_r+0x3c>
 800369e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a0:	f000 fc41 	bl	8003f26 <__retarget_lock_acquire_recursive>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	071b      	lsls	r3, r3, #28
 80036a8:	d502      	bpl.n	80036b0 <_puts_r+0x48>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d129      	bne.n	8003704 <_puts_r+0x9c>
 80036b0:	0021      	movs	r1, r4
 80036b2:	0028      	movs	r0, r5
 80036b4:	f000 f9c2 	bl	8003a3c <__swsetup_r>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d023      	beq.n	8003704 <_puts_r+0x9c>
 80036bc:	2501      	movs	r5, #1
 80036be:	426d      	negs	r5, r5
 80036c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036c2:	07db      	lsls	r3, r3, #31
 80036c4:	d405      	bmi.n	80036d2 <_puts_r+0x6a>
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	059b      	lsls	r3, r3, #22
 80036ca:	d402      	bmi.n	80036d2 <_puts_r+0x6a>
 80036cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ce:	f000 fc2b 	bl	8003f28 <__retarget_lock_release_recursive>
 80036d2:	0028      	movs	r0, r5
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <_puts_r+0xdc>)
 80036d8:	429c      	cmp	r4, r3
 80036da:	d101      	bne.n	80036e0 <_puts_r+0x78>
 80036dc:	68ac      	ldr	r4, [r5, #8]
 80036de:	e7d8      	b.n	8003692 <_puts_r+0x2a>
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <_puts_r+0xe0>)
 80036e2:	429c      	cmp	r4, r3
 80036e4:	d1d5      	bne.n	8003692 <_puts_r+0x2a>
 80036e6:	68ec      	ldr	r4, [r5, #12]
 80036e8:	e7d3      	b.n	8003692 <_puts_r+0x2a>
 80036ea:	3601      	adds	r6, #1
 80036ec:	60a3      	str	r3, [r4, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da04      	bge.n	80036fc <_puts_r+0x94>
 80036f2:	69a2      	ldr	r2, [r4, #24]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dc16      	bgt.n	8003726 <_puts_r+0xbe>
 80036f8:	290a      	cmp	r1, #10
 80036fa:	d014      	beq.n	8003726 <_puts_r+0xbe>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	6022      	str	r2, [r4, #0]
 8003702:	7019      	strb	r1, [r3, #0]
 8003704:	68a3      	ldr	r3, [r4, #8]
 8003706:	7831      	ldrb	r1, [r6, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	2900      	cmp	r1, #0
 800370c:	d1ed      	bne.n	80036ea <_puts_r+0x82>
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da0f      	bge.n	8003734 <_puts_r+0xcc>
 8003714:	0028      	movs	r0, r5
 8003716:	0022      	movs	r2, r4
 8003718:	310a      	adds	r1, #10
 800371a:	f000 f939 	bl	8003990 <__swbuf_r>
 800371e:	250a      	movs	r5, #10
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d1cd      	bne.n	80036c0 <_puts_r+0x58>
 8003724:	e7ca      	b.n	80036bc <_puts_r+0x54>
 8003726:	0022      	movs	r2, r4
 8003728:	0028      	movs	r0, r5
 800372a:	f000 f931 	bl	8003990 <__swbuf_r>
 800372e:	1c43      	adds	r3, r0, #1
 8003730:	d1e8      	bne.n	8003704 <_puts_r+0x9c>
 8003732:	e7c3      	b.n	80036bc <_puts_r+0x54>
 8003734:	250a      	movs	r5, #10
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	6022      	str	r2, [r4, #0]
 800373c:	701d      	strb	r5, [r3, #0]
 800373e:	e7bf      	b.n	80036c0 <_puts_r+0x58>
 8003740:	08004cdc 	.word	0x08004cdc
 8003744:	08004cfc 	.word	0x08004cfc
 8003748:	08004cbc 	.word	0x08004cbc

0800374c <puts>:
 800374c:	b510      	push	{r4, lr}
 800374e:	4b03      	ldr	r3, [pc, #12]	; (800375c <puts+0x10>)
 8003750:	0001      	movs	r1, r0
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	f7ff ff88 	bl	8003668 <_puts_r>
 8003758:	bd10      	pop	{r4, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	2000000c 	.word	0x2000000c

08003760 <strcasecmp>:
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	0005      	movs	r5, r0
 8003764:	2400      	movs	r4, #0
 8003766:	2703      	movs	r7, #3
 8003768:	4e09      	ldr	r6, [pc, #36]	; (8003790 <strcasecmp+0x30>)
 800376a:	5d2a      	ldrb	r2, [r5, r4]
 800376c:	5cb3      	ldrb	r3, [r6, r2]
 800376e:	403b      	ands	r3, r7
 8003770:	2b01      	cmp	r3, #1
 8003772:	d100      	bne.n	8003776 <strcasecmp+0x16>
 8003774:	3220      	adds	r2, #32
 8003776:	5d0b      	ldrb	r3, [r1, r4]
 8003778:	5cf0      	ldrb	r0, [r6, r3]
 800377a:	4038      	ands	r0, r7
 800377c:	2801      	cmp	r0, #1
 800377e:	d100      	bne.n	8003782 <strcasecmp+0x22>
 8003780:	3320      	adds	r3, #32
 8003782:	1ad0      	subs	r0, r2, r3
 8003784:	429a      	cmp	r2, r3
 8003786:	d102      	bne.n	800378e <strcasecmp+0x2e>
 8003788:	3401      	adds	r4, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ed      	bne.n	800376a <strcasecmp+0xa>
 800378e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003790:	08004bb9 	.word	0x08004bb9

08003794 <strtok>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <strtok+0x5c>)
 8003798:	0005      	movs	r5, r0
 800379a:	681f      	ldr	r7, [r3, #0]
 800379c:	000e      	movs	r6, r1
 800379e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80037a0:	2c00      	cmp	r4, #0
 80037a2:	d11d      	bne.n	80037e0 <strtok+0x4c>
 80037a4:	2050      	movs	r0, #80	; 0x50
 80037a6:	f000 fc2d 	bl	8004004 <malloc>
 80037aa:	1e02      	subs	r2, r0, #0
 80037ac:	65b8      	str	r0, [r7, #88]	; 0x58
 80037ae:	d104      	bne.n	80037ba <strtok+0x26>
 80037b0:	2157      	movs	r1, #87	; 0x57
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <strtok+0x60>)
 80037b4:	4810      	ldr	r0, [pc, #64]	; (80037f8 <strtok+0x64>)
 80037b6:	f000 f9b9 	bl	8003b2c <__assert_func>
 80037ba:	6004      	str	r4, [r0, #0]
 80037bc:	6044      	str	r4, [r0, #4]
 80037be:	6084      	str	r4, [r0, #8]
 80037c0:	60c4      	str	r4, [r0, #12]
 80037c2:	6104      	str	r4, [r0, #16]
 80037c4:	6144      	str	r4, [r0, #20]
 80037c6:	6184      	str	r4, [r0, #24]
 80037c8:	6284      	str	r4, [r0, #40]	; 0x28
 80037ca:	62c4      	str	r4, [r0, #44]	; 0x2c
 80037cc:	6304      	str	r4, [r0, #48]	; 0x30
 80037ce:	6344      	str	r4, [r0, #52]	; 0x34
 80037d0:	6384      	str	r4, [r0, #56]	; 0x38
 80037d2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80037d4:	6404      	str	r4, [r0, #64]	; 0x40
 80037d6:	6444      	str	r4, [r0, #68]	; 0x44
 80037d8:	6484      	str	r4, [r0, #72]	; 0x48
 80037da:	64c4      	str	r4, [r0, #76]	; 0x4c
 80037dc:	7704      	strb	r4, [r0, #28]
 80037de:	6244      	str	r4, [r0, #36]	; 0x24
 80037e0:	0031      	movs	r1, r6
 80037e2:	0028      	movs	r0, r5
 80037e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037e6:	2301      	movs	r3, #1
 80037e8:	f000 f808 	bl	80037fc <__strtok_r>
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	08004b04 	.word	0x08004b04
 80037f8:	08004b1b 	.word	0x08004b1b

080037fc <__strtok_r>:
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	2800      	cmp	r0, #0
 8003800:	d102      	bne.n	8003808 <__strtok_r+0xc>
 8003802:	6810      	ldr	r0, [r2, #0]
 8003804:	2800      	cmp	r0, #0
 8003806:	d013      	beq.n	8003830 <__strtok_r+0x34>
 8003808:	0004      	movs	r4, r0
 800380a:	0020      	movs	r0, r4
 800380c:	000e      	movs	r6, r1
 800380e:	7805      	ldrb	r5, [r0, #0]
 8003810:	3401      	adds	r4, #1
 8003812:	7837      	ldrb	r7, [r6, #0]
 8003814:	2f00      	cmp	r7, #0
 8003816:	d104      	bne.n	8003822 <__strtok_r+0x26>
 8003818:	2d00      	cmp	r5, #0
 800381a:	d10f      	bne.n	800383c <__strtok_r+0x40>
 800381c:	0028      	movs	r0, r5
 800381e:	6015      	str	r5, [r2, #0]
 8003820:	e006      	b.n	8003830 <__strtok_r+0x34>
 8003822:	3601      	adds	r6, #1
 8003824:	42bd      	cmp	r5, r7
 8003826:	d1f4      	bne.n	8003812 <__strtok_r+0x16>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <__strtok_r+0xe>
 800382c:	6014      	str	r4, [r2, #0]
 800382e:	7003      	strb	r3, [r0, #0]
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003832:	002f      	movs	r7, r5
 8003834:	e00f      	b.n	8003856 <__strtok_r+0x5a>
 8003836:	3301      	adds	r3, #1
 8003838:	2e00      	cmp	r6, #0
 800383a:	d104      	bne.n	8003846 <__strtok_r+0x4a>
 800383c:	0023      	movs	r3, r4
 800383e:	3401      	adds	r4, #1
 8003840:	781d      	ldrb	r5, [r3, #0]
 8003842:	0027      	movs	r7, r4
 8003844:	000b      	movs	r3, r1
 8003846:	781e      	ldrb	r6, [r3, #0]
 8003848:	42b5      	cmp	r5, r6
 800384a:	d1f4      	bne.n	8003836 <__strtok_r+0x3a>
 800384c:	2d00      	cmp	r5, #0
 800384e:	d0f0      	beq.n	8003832 <__strtok_r+0x36>
 8003850:	2300      	movs	r3, #0
 8003852:	3c01      	subs	r4, #1
 8003854:	7023      	strb	r3, [r4, #0]
 8003856:	6017      	str	r7, [r2, #0]
 8003858:	e7ea      	b.n	8003830 <__strtok_r+0x34>
	...

0800385c <_strtol_l.isra.0>:
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	001e      	movs	r6, r3
 8003862:	9005      	str	r0, [sp, #20]
 8003864:	9101      	str	r1, [sp, #4]
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d045      	beq.n	80038f8 <_strtol_l.isra.0+0x9c>
 800386c:	0008      	movs	r0, r1
 800386e:	2b24      	cmp	r3, #36	; 0x24
 8003870:	d842      	bhi.n	80038f8 <_strtol_l.isra.0+0x9c>
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <_strtol_l.isra.0+0x114>)
 8003874:	2208      	movs	r2, #8
 8003876:	469c      	mov	ip, r3
 8003878:	0003      	movs	r3, r0
 800387a:	4661      	mov	r1, ip
 800387c:	781c      	ldrb	r4, [r3, #0]
 800387e:	1c45      	adds	r5, r0, #1
 8003880:	5d09      	ldrb	r1, [r1, r4]
 8003882:	0028      	movs	r0, r5
 8003884:	000f      	movs	r7, r1
 8003886:	4017      	ands	r7, r2
 8003888:	4211      	tst	r1, r2
 800388a:	d1f5      	bne.n	8003878 <_strtol_l.isra.0+0x1c>
 800388c:	2c2d      	cmp	r4, #45	; 0x2d
 800388e:	d13a      	bne.n	8003906 <_strtol_l.isra.0+0xaa>
 8003890:	2701      	movs	r7, #1
 8003892:	782c      	ldrb	r4, [r5, #0]
 8003894:	1c9d      	adds	r5, r3, #2
 8003896:	2e00      	cmp	r6, #0
 8003898:	d065      	beq.n	8003966 <_strtol_l.isra.0+0x10a>
 800389a:	2e10      	cmp	r6, #16
 800389c:	d109      	bne.n	80038b2 <_strtol_l.isra.0+0x56>
 800389e:	2c30      	cmp	r4, #48	; 0x30
 80038a0:	d107      	bne.n	80038b2 <_strtol_l.isra.0+0x56>
 80038a2:	2220      	movs	r2, #32
 80038a4:	782b      	ldrb	r3, [r5, #0]
 80038a6:	4393      	bics	r3, r2
 80038a8:	2b58      	cmp	r3, #88	; 0x58
 80038aa:	d157      	bne.n	800395c <_strtol_l.isra.0+0x100>
 80038ac:	2610      	movs	r6, #16
 80038ae:	786c      	ldrb	r4, [r5, #1]
 80038b0:	3502      	adds	r5, #2
 80038b2:	4b30      	ldr	r3, [pc, #192]	; (8003974 <_strtol_l.isra.0+0x118>)
 80038b4:	0031      	movs	r1, r6
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	0018      	movs	r0, r3
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	f7fc fcb4 	bl	8000228 <__aeabi_uidivmod>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2201      	movs	r2, #1
 80038c4:	4684      	mov	ip, r0
 80038c6:	0018      	movs	r0, r3
 80038c8:	9104      	str	r1, [sp, #16]
 80038ca:	4252      	negs	r2, r2
 80038cc:	0021      	movs	r1, r4
 80038ce:	3930      	subs	r1, #48	; 0x30
 80038d0:	2909      	cmp	r1, #9
 80038d2:	d81d      	bhi.n	8003910 <_strtol_l.isra.0+0xb4>
 80038d4:	000c      	movs	r4, r1
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	dd28      	ble.n	800392c <_strtol_l.isra.0+0xd0>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db24      	blt.n	8003928 <_strtol_l.isra.0+0xcc>
 80038de:	0013      	movs	r3, r2
 80038e0:	4584      	cmp	ip, r0
 80038e2:	d306      	bcc.n	80038f2 <_strtol_l.isra.0+0x96>
 80038e4:	d102      	bne.n	80038ec <_strtol_l.isra.0+0x90>
 80038e6:	9904      	ldr	r1, [sp, #16]
 80038e8:	42a1      	cmp	r1, r4
 80038ea:	db02      	blt.n	80038f2 <_strtol_l.isra.0+0x96>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4370      	muls	r0, r6
 80038f0:	1820      	adds	r0, r4, r0
 80038f2:	782c      	ldrb	r4, [r5, #0]
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7e9      	b.n	80038cc <_strtol_l.isra.0+0x70>
 80038f8:	f7ff fe6a 	bl	80035d0 <__errno>
 80038fc:	2316      	movs	r3, #22
 80038fe:	6003      	str	r3, [r0, #0]
 8003900:	2000      	movs	r0, #0
 8003902:	b007      	add	sp, #28
 8003904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003906:	2c2b      	cmp	r4, #43	; 0x2b
 8003908:	d1c5      	bne.n	8003896 <_strtol_l.isra.0+0x3a>
 800390a:	782c      	ldrb	r4, [r5, #0]
 800390c:	1c9d      	adds	r5, r3, #2
 800390e:	e7c2      	b.n	8003896 <_strtol_l.isra.0+0x3a>
 8003910:	0021      	movs	r1, r4
 8003912:	3941      	subs	r1, #65	; 0x41
 8003914:	2919      	cmp	r1, #25
 8003916:	d801      	bhi.n	800391c <_strtol_l.isra.0+0xc0>
 8003918:	3c37      	subs	r4, #55	; 0x37
 800391a:	e7dc      	b.n	80038d6 <_strtol_l.isra.0+0x7a>
 800391c:	0021      	movs	r1, r4
 800391e:	3961      	subs	r1, #97	; 0x61
 8003920:	2919      	cmp	r1, #25
 8003922:	d803      	bhi.n	800392c <_strtol_l.isra.0+0xd0>
 8003924:	3c57      	subs	r4, #87	; 0x57
 8003926:	e7d6      	b.n	80038d6 <_strtol_l.isra.0+0x7a>
 8003928:	0013      	movs	r3, r2
 800392a:	e7e2      	b.n	80038f2 <_strtol_l.isra.0+0x96>
 800392c:	2b00      	cmp	r3, #0
 800392e:	da09      	bge.n	8003944 <_strtol_l.isra.0+0xe8>
 8003930:	2322      	movs	r3, #34	; 0x22
 8003932:	9a05      	ldr	r2, [sp, #20]
 8003934:	9803      	ldr	r0, [sp, #12]
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	9b02      	ldr	r3, [sp, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0e1      	beq.n	8003902 <_strtol_l.isra.0+0xa6>
 800393e:	1e6b      	subs	r3, r5, #1
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	e007      	b.n	8003954 <_strtol_l.isra.0+0xf8>
 8003944:	2f00      	cmp	r7, #0
 8003946:	d000      	beq.n	800394a <_strtol_l.isra.0+0xee>
 8003948:	4240      	negs	r0, r0
 800394a:	9a02      	ldr	r2, [sp, #8]
 800394c:	2a00      	cmp	r2, #0
 800394e:	d0d8      	beq.n	8003902 <_strtol_l.isra.0+0xa6>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f4      	bne.n	800393e <_strtol_l.isra.0+0xe2>
 8003954:	9b02      	ldr	r3, [sp, #8]
 8003956:	9a01      	ldr	r2, [sp, #4]
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e7d2      	b.n	8003902 <_strtol_l.isra.0+0xa6>
 800395c:	2430      	movs	r4, #48	; 0x30
 800395e:	2e00      	cmp	r6, #0
 8003960:	d1a7      	bne.n	80038b2 <_strtol_l.isra.0+0x56>
 8003962:	3608      	adds	r6, #8
 8003964:	e7a5      	b.n	80038b2 <_strtol_l.isra.0+0x56>
 8003966:	2c30      	cmp	r4, #48	; 0x30
 8003968:	d09b      	beq.n	80038a2 <_strtol_l.isra.0+0x46>
 800396a:	260a      	movs	r6, #10
 800396c:	e7a1      	b.n	80038b2 <_strtol_l.isra.0+0x56>
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	08004bb9 	.word	0x08004bb9
 8003974:	7fffffff 	.word	0x7fffffff

08003978 <strtol>:
 8003978:	b510      	push	{r4, lr}
 800397a:	0013      	movs	r3, r2
 800397c:	000a      	movs	r2, r1
 800397e:	0001      	movs	r1, r0
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <strtol+0x14>)
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	f7ff ff6a 	bl	800385c <_strtol_l.isra.0>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	2000000c 	.word	0x2000000c

08003990 <__swbuf_r>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	0005      	movs	r5, r0
 8003994:	000e      	movs	r6, r1
 8003996:	0014      	movs	r4, r2
 8003998:	2800      	cmp	r0, #0
 800399a:	d004      	beq.n	80039a6 <__swbuf_r+0x16>
 800399c:	6983      	ldr	r3, [r0, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <__swbuf_r+0x16>
 80039a2:	f000 fa0f 	bl	8003dc4 <__sinit>
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <__swbuf_r+0xa0>)
 80039a8:	429c      	cmp	r4, r3
 80039aa:	d12e      	bne.n	8003a0a <__swbuf_r+0x7a>
 80039ac:	686c      	ldr	r4, [r5, #4]
 80039ae:	69a3      	ldr	r3, [r4, #24]
 80039b0:	60a3      	str	r3, [r4, #8]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	d532      	bpl.n	8003a1e <__swbuf_r+0x8e>
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d02f      	beq.n	8003a1e <__swbuf_r+0x8e>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	b2f7      	uxtb	r7, r6
 80039c4:	1a98      	subs	r0, r3, r2
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	b2f6      	uxtb	r6, r6
 80039ca:	4283      	cmp	r3, r0
 80039cc:	dc05      	bgt.n	80039da <__swbuf_r+0x4a>
 80039ce:	0021      	movs	r1, r4
 80039d0:	0028      	movs	r0, r5
 80039d2:	f000 f955 	bl	8003c80 <_fflush_r>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d127      	bne.n	8003a2a <__swbuf_r+0x9a>
 80039da:	68a3      	ldr	r3, [r4, #8]
 80039dc:	3001      	adds	r0, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	6022      	str	r2, [r4, #0]
 80039e8:	701f      	strb	r7, [r3, #0]
 80039ea:	6963      	ldr	r3, [r4, #20]
 80039ec:	4283      	cmp	r3, r0
 80039ee:	d004      	beq.n	80039fa <__swbuf_r+0x6a>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	07db      	lsls	r3, r3, #31
 80039f4:	d507      	bpl.n	8003a06 <__swbuf_r+0x76>
 80039f6:	2e0a      	cmp	r6, #10
 80039f8:	d105      	bne.n	8003a06 <__swbuf_r+0x76>
 80039fa:	0021      	movs	r1, r4
 80039fc:	0028      	movs	r0, r5
 80039fe:	f000 f93f 	bl	8003c80 <_fflush_r>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d111      	bne.n	8003a2a <__swbuf_r+0x9a>
 8003a06:	0030      	movs	r0, r6
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <__swbuf_r+0xa4>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d101      	bne.n	8003a14 <__swbuf_r+0x84>
 8003a10:	68ac      	ldr	r4, [r5, #8]
 8003a12:	e7cc      	b.n	80039ae <__swbuf_r+0x1e>
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <__swbuf_r+0xa8>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d1c9      	bne.n	80039ae <__swbuf_r+0x1e>
 8003a1a:	68ec      	ldr	r4, [r5, #12]
 8003a1c:	e7c7      	b.n	80039ae <__swbuf_r+0x1e>
 8003a1e:	0021      	movs	r1, r4
 8003a20:	0028      	movs	r0, r5
 8003a22:	f000 f80b 	bl	8003a3c <__swsetup_r>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0c9      	beq.n	80039be <__swbuf_r+0x2e>
 8003a2a:	2601      	movs	r6, #1
 8003a2c:	4276      	negs	r6, r6
 8003a2e:	e7ea      	b.n	8003a06 <__swbuf_r+0x76>
 8003a30:	08004cdc 	.word	0x08004cdc
 8003a34:	08004cfc 	.word	0x08004cfc
 8003a38:	08004cbc 	.word	0x08004cbc

08003a3c <__swsetup_r>:
 8003a3c:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <__swsetup_r+0xe0>)
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	0006      	movs	r6, r0
 8003a44:	000c      	movs	r4, r1
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	d005      	beq.n	8003a56 <__swsetup_r+0x1a>
 8003a4a:	69ab      	ldr	r3, [r5, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <__swsetup_r+0x1a>
 8003a50:	0028      	movs	r0, r5
 8003a52:	f000 f9b7 	bl	8003dc4 <__sinit>
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <__swsetup_r+0xe4>)
 8003a58:	429c      	cmp	r4, r3
 8003a5a:	d10f      	bne.n	8003a7c <__swsetup_r+0x40>
 8003a5c:	686c      	ldr	r4, [r5, #4]
 8003a5e:	230c      	movs	r3, #12
 8003a60:	5ee2      	ldrsh	r2, [r4, r3]
 8003a62:	b293      	uxth	r3, r2
 8003a64:	0711      	lsls	r1, r2, #28
 8003a66:	d42d      	bmi.n	8003ac4 <__swsetup_r+0x88>
 8003a68:	06d9      	lsls	r1, r3, #27
 8003a6a:	d411      	bmi.n	8003a90 <__swsetup_r+0x54>
 8003a6c:	2309      	movs	r3, #9
 8003a6e:	2001      	movs	r0, #1
 8003a70:	6033      	str	r3, [r6, #0]
 8003a72:	3337      	adds	r3, #55	; 0x37
 8003a74:	4313      	orrs	r3, r2
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	4240      	negs	r0, r0
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <__swsetup_r+0xe8>)
 8003a7e:	429c      	cmp	r4, r3
 8003a80:	d101      	bne.n	8003a86 <__swsetup_r+0x4a>
 8003a82:	68ac      	ldr	r4, [r5, #8]
 8003a84:	e7eb      	b.n	8003a5e <__swsetup_r+0x22>
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <__swsetup_r+0xec>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d1e8      	bne.n	8003a5e <__swsetup_r+0x22>
 8003a8c:	68ec      	ldr	r4, [r5, #12]
 8003a8e:	e7e6      	b.n	8003a5e <__swsetup_r+0x22>
 8003a90:	075b      	lsls	r3, r3, #29
 8003a92:	d513      	bpl.n	8003abc <__swsetup_r+0x80>
 8003a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d008      	beq.n	8003aac <__swsetup_r+0x70>
 8003a9a:	0023      	movs	r3, r4
 8003a9c:	3344      	adds	r3, #68	; 0x44
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	d002      	beq.n	8003aa8 <__swsetup_r+0x6c>
 8003aa2:	0030      	movs	r0, r6
 8003aa4:	f000 fab8 	bl	8004018 <_free_r>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6363      	str	r3, [r4, #52]	; 0x34
 8003aac:	2224      	movs	r2, #36	; 0x24
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6063      	str	r3, [r4, #4]
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	2308      	movs	r3, #8
 8003abe:	89a2      	ldrh	r2, [r4, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <__swsetup_r+0xa6>
 8003aca:	21a0      	movs	r1, #160	; 0xa0
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	0089      	lsls	r1, r1, #2
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <__swsetup_r+0xa6>
 8003ada:	0021      	movs	r1, r4
 8003adc:	0030      	movs	r0, r6
 8003ade:	f000 fa4d 	bl	8003f7c <__smakebuf_r>
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	5ea3      	ldrsh	r3, [r4, r2]
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	001a      	movs	r2, r3
 8003aea:	b299      	uxth	r1, r3
 8003aec:	4002      	ands	r2, r0
 8003aee:	4203      	tst	r3, r0
 8003af0:	d00f      	beq.n	8003b12 <__swsetup_r+0xd6>
 8003af2:	2200      	movs	r2, #0
 8003af4:	60a2      	str	r2, [r4, #8]
 8003af6:	6962      	ldr	r2, [r4, #20]
 8003af8:	4252      	negs	r2, r2
 8003afa:	61a2      	str	r2, [r4, #24]
 8003afc:	2000      	movs	r0, #0
 8003afe:	6922      	ldr	r2, [r4, #16]
 8003b00:	4282      	cmp	r2, r0
 8003b02:	d1ba      	bne.n	8003a7a <__swsetup_r+0x3e>
 8003b04:	060a      	lsls	r2, r1, #24
 8003b06:	d5b8      	bpl.n	8003a7a <__swsetup_r+0x3e>
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	3801      	subs	r0, #1
 8003b10:	e7b3      	b.n	8003a7a <__swsetup_r+0x3e>
 8003b12:	0788      	lsls	r0, r1, #30
 8003b14:	d400      	bmi.n	8003b18 <__swsetup_r+0xdc>
 8003b16:	6962      	ldr	r2, [r4, #20]
 8003b18:	60a2      	str	r2, [r4, #8]
 8003b1a:	e7ef      	b.n	8003afc <__swsetup_r+0xc0>
 8003b1c:	2000000c 	.word	0x2000000c
 8003b20:	08004cdc 	.word	0x08004cdc
 8003b24:	08004cfc 	.word	0x08004cfc
 8003b28:	08004cbc 	.word	0x08004cbc

08003b2c <__assert_func>:
 8003b2c:	b530      	push	{r4, r5, lr}
 8003b2e:	0014      	movs	r4, r2
 8003b30:	001a      	movs	r2, r3
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <__assert_func+0x2c>)
 8003b34:	0005      	movs	r5, r0
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b085      	sub	sp, #20
 8003b3a:	68d8      	ldr	r0, [r3, #12]
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <__assert_func+0x30>)
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	d101      	bne.n	8003b46 <__assert_func+0x1a>
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <__assert_func+0x34>)
 8003b44:	001c      	movs	r4, r3
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	9100      	str	r1, [sp, #0]
 8003b4a:	002b      	movs	r3, r5
 8003b4c:	4905      	ldr	r1, [pc, #20]	; (8003b64 <__assert_func+0x38>)
 8003b4e:	9402      	str	r4, [sp, #8]
 8003b50:	f000 f9b8 	bl	8003ec4 <fiprintf>
 8003b54:	f000 fe5e 	bl	8004814 <abort>
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	08004b7c 	.word	0x08004b7c
 8003b60:	08004bb7 	.word	0x08004bb7
 8003b64:	08004b89 	.word	0x08004b89

08003b68 <__sflush_r>:
 8003b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6a:	898b      	ldrh	r3, [r1, #12]
 8003b6c:	0005      	movs	r5, r0
 8003b6e:	000c      	movs	r4, r1
 8003b70:	071a      	lsls	r2, r3, #28
 8003b72:	d45f      	bmi.n	8003c34 <__sflush_r+0xcc>
 8003b74:	684a      	ldr	r2, [r1, #4]
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	dc04      	bgt.n	8003b84 <__sflush_r+0x1c>
 8003b7a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003b7c:	2a00      	cmp	r2, #0
 8003b7e:	dc01      	bgt.n	8003b84 <__sflush_r+0x1c>
 8003b80:	2000      	movs	r0, #0
 8003b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b86:	2f00      	cmp	r7, #0
 8003b88:	d0fa      	beq.n	8003b80 <__sflush_r+0x18>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	682e      	ldr	r6, [r5, #0]
 8003b90:	602a      	str	r2, [r5, #0]
 8003b92:	001a      	movs	r2, r3
 8003b94:	0149      	lsls	r1, r1, #5
 8003b96:	400a      	ands	r2, r1
 8003b98:	420b      	tst	r3, r1
 8003b9a:	d034      	beq.n	8003c06 <__sflush_r+0x9e>
 8003b9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	075b      	lsls	r3, r3, #29
 8003ba2:	d506      	bpl.n	8003bb2 <__sflush_r+0x4a>
 8003ba4:	6863      	ldr	r3, [r4, #4]
 8003ba6:	1ac0      	subs	r0, r0, r3
 8003ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <__sflush_r+0x4a>
 8003bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bb0:	1ac0      	subs	r0, r0, r3
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	6a21      	ldr	r1, [r4, #32]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	0028      	movs	r0, r5
 8003bba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bbc:	47b8      	blx	r7
 8003bbe:	89a1      	ldrh	r1, [r4, #12]
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d106      	bne.n	8003bd2 <__sflush_r+0x6a>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	2b1d      	cmp	r3, #29
 8003bc8:	d831      	bhi.n	8003c2e <__sflush_r+0xc6>
 8003bca:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <__sflush_r+0x114>)
 8003bcc:	40da      	lsrs	r2, r3
 8003bce:	07d3      	lsls	r3, r2, #31
 8003bd0:	d52d      	bpl.n	8003c2e <__sflush_r+0xc6>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	04cb      	lsls	r3, r1, #19
 8003bdc:	d505      	bpl.n	8003bea <__sflush_r+0x82>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	d102      	bne.n	8003be8 <__sflush_r+0x80>
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d100      	bne.n	8003bea <__sflush_r+0x82>
 8003be8:	6560      	str	r0, [r4, #84]	; 0x54
 8003bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bec:	602e      	str	r6, [r5, #0]
 8003bee:	2900      	cmp	r1, #0
 8003bf0:	d0c6      	beq.n	8003b80 <__sflush_r+0x18>
 8003bf2:	0023      	movs	r3, r4
 8003bf4:	3344      	adds	r3, #68	; 0x44
 8003bf6:	4299      	cmp	r1, r3
 8003bf8:	d002      	beq.n	8003c00 <__sflush_r+0x98>
 8003bfa:	0028      	movs	r0, r5
 8003bfc:	f000 fa0c 	bl	8004018 <_free_r>
 8003c00:	2000      	movs	r0, #0
 8003c02:	6360      	str	r0, [r4, #52]	; 0x34
 8003c04:	e7bd      	b.n	8003b82 <__sflush_r+0x1a>
 8003c06:	2301      	movs	r3, #1
 8003c08:	0028      	movs	r0, r5
 8003c0a:	6a21      	ldr	r1, [r4, #32]
 8003c0c:	47b8      	blx	r7
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d1c5      	bne.n	8003b9e <__sflush_r+0x36>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0c2      	beq.n	8003b9e <__sflush_r+0x36>
 8003c18:	2b1d      	cmp	r3, #29
 8003c1a:	d001      	beq.n	8003c20 <__sflush_r+0xb8>
 8003c1c:	2b16      	cmp	r3, #22
 8003c1e:	d101      	bne.n	8003c24 <__sflush_r+0xbc>
 8003c20:	602e      	str	r6, [r5, #0]
 8003c22:	e7ad      	b.n	8003b80 <__sflush_r+0x18>
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	89a2      	ldrh	r2, [r4, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	e7a9      	b.n	8003b82 <__sflush_r+0x1a>
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	430b      	orrs	r3, r1
 8003c32:	e7fa      	b.n	8003c2a <__sflush_r+0xc2>
 8003c34:	690f      	ldr	r7, [r1, #16]
 8003c36:	2f00      	cmp	r7, #0
 8003c38:	d0a2      	beq.n	8003b80 <__sflush_r+0x18>
 8003c3a:	680a      	ldr	r2, [r1, #0]
 8003c3c:	600f      	str	r7, [r1, #0]
 8003c3e:	1bd2      	subs	r2, r2, r7
 8003c40:	9201      	str	r2, [sp, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	079b      	lsls	r3, r3, #30
 8003c46:	d100      	bne.n	8003c4a <__sflush_r+0xe2>
 8003c48:	694a      	ldr	r2, [r1, #20]
 8003c4a:	60a2      	str	r2, [r4, #8]
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dc00      	bgt.n	8003c54 <__sflush_r+0xec>
 8003c52:	e795      	b.n	8003b80 <__sflush_r+0x18>
 8003c54:	003a      	movs	r2, r7
 8003c56:	0028      	movs	r0, r5
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	6a21      	ldr	r1, [r4, #32]
 8003c5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c5e:	47b0      	blx	r6
 8003c60:	2800      	cmp	r0, #0
 8003c62:	dc06      	bgt.n	8003c72 <__sflush_r+0x10a>
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	2001      	movs	r0, #1
 8003c68:	89a2      	ldrh	r2, [r4, #12]
 8003c6a:	4240      	negs	r0, r0
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	e787      	b.n	8003b82 <__sflush_r+0x1a>
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	183f      	adds	r7, r7, r0
 8003c76:	1a1b      	subs	r3, r3, r0
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	e7e7      	b.n	8003c4c <__sflush_r+0xe4>
 8003c7c:	20400001 	.word	0x20400001

08003c80 <_fflush_r>:
 8003c80:	690b      	ldr	r3, [r1, #16]
 8003c82:	b570      	push	{r4, r5, r6, lr}
 8003c84:	0005      	movs	r5, r0
 8003c86:	000c      	movs	r4, r1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_fflush_r+0x12>
 8003c8c:	2500      	movs	r5, #0
 8003c8e:	0028      	movs	r0, r5
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d004      	beq.n	8003ca0 <_fflush_r+0x20>
 8003c96:	6983      	ldr	r3, [r0, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <_fflush_r+0x20>
 8003c9c:	f000 f892 	bl	8003dc4 <__sinit>
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <_fflush_r+0x74>)
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d11b      	bne.n	8003cde <_fflush_r+0x5e>
 8003ca6:	686c      	ldr	r4, [r5, #4]
 8003ca8:	220c      	movs	r2, #12
 8003caa:	5ea3      	ldrsh	r3, [r4, r2]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ed      	beq.n	8003c8c <_fflush_r+0xc>
 8003cb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cb2:	07d2      	lsls	r2, r2, #31
 8003cb4:	d404      	bmi.n	8003cc0 <_fflush_r+0x40>
 8003cb6:	059b      	lsls	r3, r3, #22
 8003cb8:	d402      	bmi.n	8003cc0 <_fflush_r+0x40>
 8003cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cbc:	f000 f933 	bl	8003f26 <__retarget_lock_acquire_recursive>
 8003cc0:	0028      	movs	r0, r5
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	f7ff ff50 	bl	8003b68 <__sflush_r>
 8003cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cca:	0005      	movs	r5, r0
 8003ccc:	07db      	lsls	r3, r3, #31
 8003cce:	d4de      	bmi.n	8003c8e <_fflush_r+0xe>
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	059b      	lsls	r3, r3, #22
 8003cd4:	d4db      	bmi.n	8003c8e <_fflush_r+0xe>
 8003cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd8:	f000 f926 	bl	8003f28 <__retarget_lock_release_recursive>
 8003cdc:	e7d7      	b.n	8003c8e <_fflush_r+0xe>
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <_fflush_r+0x78>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d101      	bne.n	8003ce8 <_fflush_r+0x68>
 8003ce4:	68ac      	ldr	r4, [r5, #8]
 8003ce6:	e7df      	b.n	8003ca8 <_fflush_r+0x28>
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <_fflush_r+0x7c>)
 8003cea:	429c      	cmp	r4, r3
 8003cec:	d1dc      	bne.n	8003ca8 <_fflush_r+0x28>
 8003cee:	68ec      	ldr	r4, [r5, #12]
 8003cf0:	e7da      	b.n	8003ca8 <_fflush_r+0x28>
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	08004cdc 	.word	0x08004cdc
 8003cf8:	08004cfc 	.word	0x08004cfc
 8003cfc:	08004cbc 	.word	0x08004cbc

08003d00 <std>:
 8003d00:	2300      	movs	r3, #0
 8003d02:	b510      	push	{r4, lr}
 8003d04:	0004      	movs	r4, r0
 8003d06:	6003      	str	r3, [r0, #0]
 8003d08:	6043      	str	r3, [r0, #4]
 8003d0a:	6083      	str	r3, [r0, #8]
 8003d0c:	8181      	strh	r1, [r0, #12]
 8003d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d10:	0019      	movs	r1, r3
 8003d12:	81c2      	strh	r2, [r0, #14]
 8003d14:	6103      	str	r3, [r0, #16]
 8003d16:	6143      	str	r3, [r0, #20]
 8003d18:	6183      	str	r3, [r0, #24]
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	305c      	adds	r0, #92	; 0x5c
 8003d1e:	f7ff fc81 	bl	8003624 <memset>
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <std+0x38>)
 8003d24:	6263      	str	r3, [r4, #36]	; 0x24
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <std+0x3c>)
 8003d28:	6224      	str	r4, [r4, #32]
 8003d2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <std+0x40>)
 8003d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <std+0x44>)
 8003d32:	6323      	str	r3, [r4, #48]	; 0x30
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	08004755 	.word	0x08004755
 8003d3c:	0800477d 	.word	0x0800477d
 8003d40:	080047b5 	.word	0x080047b5
 8003d44:	080047e1 	.word	0x080047e1

08003d48 <_cleanup_r>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4902      	ldr	r1, [pc, #8]	; (8003d54 <_cleanup_r+0xc>)
 8003d4c:	f000 f8ca 	bl	8003ee4 <_fwalk_reent>
 8003d50:	bd10      	pop	{r4, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	08003c81 	.word	0x08003c81

08003d58 <__sfmoreglue>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	2568      	movs	r5, #104	; 0x68
 8003d5c:	1e4a      	subs	r2, r1, #1
 8003d5e:	4355      	muls	r5, r2
 8003d60:	000e      	movs	r6, r1
 8003d62:	0029      	movs	r1, r5
 8003d64:	3174      	adds	r1, #116	; 0x74
 8003d66:	f000 f9a1 	bl	80040ac <_malloc_r>
 8003d6a:	1e04      	subs	r4, r0, #0
 8003d6c:	d008      	beq.n	8003d80 <__sfmoreglue+0x28>
 8003d6e:	2100      	movs	r1, #0
 8003d70:	002a      	movs	r2, r5
 8003d72:	6001      	str	r1, [r0, #0]
 8003d74:	6046      	str	r6, [r0, #4]
 8003d76:	300c      	adds	r0, #12
 8003d78:	60a0      	str	r0, [r4, #8]
 8003d7a:	3268      	adds	r2, #104	; 0x68
 8003d7c:	f7ff fc52 	bl	8003624 <memset>
 8003d80:	0020      	movs	r0, r4
 8003d82:	bd70      	pop	{r4, r5, r6, pc}

08003d84 <__sfp_lock_acquire>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4802      	ldr	r0, [pc, #8]	; (8003d90 <__sfp_lock_acquire+0xc>)
 8003d88:	f000 f8cd 	bl	8003f26 <__retarget_lock_acquire_recursive>
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	2000023c 	.word	0x2000023c

08003d94 <__sfp_lock_release>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4802      	ldr	r0, [pc, #8]	; (8003da0 <__sfp_lock_release+0xc>)
 8003d98:	f000 f8c6 	bl	8003f28 <__retarget_lock_release_recursive>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	2000023c 	.word	0x2000023c

08003da4 <__sinit_lock_acquire>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4802      	ldr	r0, [pc, #8]	; (8003db0 <__sinit_lock_acquire+0xc>)
 8003da8:	f000 f8bd 	bl	8003f26 <__retarget_lock_acquire_recursive>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	20000237 	.word	0x20000237

08003db4 <__sinit_lock_release>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <__sinit_lock_release+0xc>)
 8003db8:	f000 f8b6 	bl	8003f28 <__retarget_lock_release_recursive>
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	20000237 	.word	0x20000237

08003dc4 <__sinit>:
 8003dc4:	b513      	push	{r0, r1, r4, lr}
 8003dc6:	0004      	movs	r4, r0
 8003dc8:	f7ff ffec 	bl	8003da4 <__sinit_lock_acquire>
 8003dcc:	69a3      	ldr	r3, [r4, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <__sinit+0x14>
 8003dd2:	f7ff ffef 	bl	8003db4 <__sinit_lock_release>
 8003dd6:	bd13      	pop	{r0, r1, r4, pc}
 8003dd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8003dda:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <__sinit+0x68>)
 8003de0:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <__sinit+0x6c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d101      	bne.n	8003df0 <__sinit+0x2c>
 8003dec:	2301      	movs	r3, #1
 8003dee:	61a3      	str	r3, [r4, #24]
 8003df0:	0020      	movs	r0, r4
 8003df2:	f000 f81f 	bl	8003e34 <__sfp>
 8003df6:	6060      	str	r0, [r4, #4]
 8003df8:	0020      	movs	r0, r4
 8003dfa:	f000 f81b 	bl	8003e34 <__sfp>
 8003dfe:	60a0      	str	r0, [r4, #8]
 8003e00:	0020      	movs	r0, r4
 8003e02:	f000 f817 	bl	8003e34 <__sfp>
 8003e06:	2200      	movs	r2, #0
 8003e08:	2104      	movs	r1, #4
 8003e0a:	60e0      	str	r0, [r4, #12]
 8003e0c:	6860      	ldr	r0, [r4, #4]
 8003e0e:	f7ff ff77 	bl	8003d00 <std>
 8003e12:	2201      	movs	r2, #1
 8003e14:	2109      	movs	r1, #9
 8003e16:	68a0      	ldr	r0, [r4, #8]
 8003e18:	f7ff ff72 	bl	8003d00 <std>
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	2112      	movs	r1, #18
 8003e20:	68e0      	ldr	r0, [r4, #12]
 8003e22:	f7ff ff6d 	bl	8003d00 <std>
 8003e26:	2301      	movs	r3, #1
 8003e28:	61a3      	str	r3, [r4, #24]
 8003e2a:	e7d2      	b.n	8003dd2 <__sinit+0xe>
 8003e2c:	08004b00 	.word	0x08004b00
 8003e30:	08003d49 	.word	0x08003d49

08003e34 <__sfp>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	0007      	movs	r7, r0
 8003e38:	f7ff ffa4 	bl	8003d84 <__sfp_lock_acquire>
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <__sfp+0x88>)
 8003e3e:	681e      	ldr	r6, [r3, #0]
 8003e40:	69b3      	ldr	r3, [r6, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <__sfp+0x18>
 8003e46:	0030      	movs	r0, r6
 8003e48:	f7ff ffbc 	bl	8003dc4 <__sinit>
 8003e4c:	3648      	adds	r6, #72	; 0x48
 8003e4e:	68b4      	ldr	r4, [r6, #8]
 8003e50:	6873      	ldr	r3, [r6, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	d504      	bpl.n	8003e60 <__sfp+0x2c>
 8003e56:	6833      	ldr	r3, [r6, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <__sfp+0x6e>
 8003e5c:	6836      	ldr	r6, [r6, #0]
 8003e5e:	e7f6      	b.n	8003e4e <__sfp+0x1a>
 8003e60:	220c      	movs	r2, #12
 8003e62:	5ea5      	ldrsh	r5, [r4, r2]
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	d11a      	bne.n	8003e9e <__sfp+0x6a>
 8003e68:	0020      	movs	r0, r4
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <__sfp+0x8c>)
 8003e6c:	3058      	adds	r0, #88	; 0x58
 8003e6e:	60e3      	str	r3, [r4, #12]
 8003e70:	6665      	str	r5, [r4, #100]	; 0x64
 8003e72:	f000 f857 	bl	8003f24 <__retarget_lock_init_recursive>
 8003e76:	f7ff ff8d 	bl	8003d94 <__sfp_lock_release>
 8003e7a:	0020      	movs	r0, r4
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	0029      	movs	r1, r5
 8003e80:	6025      	str	r5, [r4, #0]
 8003e82:	60a5      	str	r5, [r4, #8]
 8003e84:	6065      	str	r5, [r4, #4]
 8003e86:	6125      	str	r5, [r4, #16]
 8003e88:	6165      	str	r5, [r4, #20]
 8003e8a:	61a5      	str	r5, [r4, #24]
 8003e8c:	305c      	adds	r0, #92	; 0x5c
 8003e8e:	f7ff fbc9 	bl	8003624 <memset>
 8003e92:	6365      	str	r5, [r4, #52]	; 0x34
 8003e94:	63a5      	str	r5, [r4, #56]	; 0x38
 8003e96:	64a5      	str	r5, [r4, #72]	; 0x48
 8003e98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9e:	3468      	adds	r4, #104	; 0x68
 8003ea0:	e7d7      	b.n	8003e52 <__sfp+0x1e>
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	0038      	movs	r0, r7
 8003ea6:	f7ff ff57 	bl	8003d58 <__sfmoreglue>
 8003eaa:	1e04      	subs	r4, r0, #0
 8003eac:	6030      	str	r0, [r6, #0]
 8003eae:	d1d5      	bne.n	8003e5c <__sfp+0x28>
 8003eb0:	f7ff ff70 	bl	8003d94 <__sfp_lock_release>
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	e7ef      	b.n	8003e9a <__sfp+0x66>
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	08004b00 	.word	0x08004b00
 8003ec0:	ffff0001 	.word	0xffff0001

08003ec4 <fiprintf>:
 8003ec4:	b40e      	push	{r1, r2, r3}
 8003ec6:	b503      	push	{r0, r1, lr}
 8003ec8:	0001      	movs	r1, r0
 8003eca:	ab03      	add	r3, sp, #12
 8003ecc:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <fiprintf+0x1c>)
 8003ece:	cb04      	ldmia	r3!, {r2}
 8003ed0:	6800      	ldr	r0, [r0, #0]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	f000 f970 	bl	80041b8 <_vfiprintf_r>
 8003ed8:	b002      	add	sp, #8
 8003eda:	bc08      	pop	{r3}
 8003edc:	b003      	add	sp, #12
 8003ede:	4718      	bx	r3
 8003ee0:	2000000c 	.word	0x2000000c

08003ee4 <_fwalk_reent>:
 8003ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ee6:	0004      	movs	r4, r0
 8003ee8:	0006      	movs	r6, r0
 8003eea:	2700      	movs	r7, #0
 8003eec:	9101      	str	r1, [sp, #4]
 8003eee:	3448      	adds	r4, #72	; 0x48
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	68a5      	ldr	r5, [r4, #8]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	d504      	bpl.n	8003f08 <_fwalk_reent+0x24>
 8003efe:	6824      	ldr	r4, [r4, #0]
 8003f00:	2c00      	cmp	r4, #0
 8003f02:	d1f5      	bne.n	8003ef0 <_fwalk_reent+0xc>
 8003f04:	0038      	movs	r0, r7
 8003f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f08:	89ab      	ldrh	r3, [r5, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d908      	bls.n	8003f20 <_fwalk_reent+0x3c>
 8003f0e:	220e      	movs	r2, #14
 8003f10:	5eab      	ldrsh	r3, [r5, r2]
 8003f12:	3301      	adds	r3, #1
 8003f14:	d004      	beq.n	8003f20 <_fwalk_reent+0x3c>
 8003f16:	0029      	movs	r1, r5
 8003f18:	0030      	movs	r0, r6
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	4307      	orrs	r7, r0
 8003f20:	3568      	adds	r5, #104	; 0x68
 8003f22:	e7e8      	b.n	8003ef6 <_fwalk_reent+0x12>

08003f24 <__retarget_lock_init_recursive>:
 8003f24:	4770      	bx	lr

08003f26 <__retarget_lock_acquire_recursive>:
 8003f26:	4770      	bx	lr

08003f28 <__retarget_lock_release_recursive>:
 8003f28:	4770      	bx	lr
	...

08003f2c <__swhatbuf_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	000e      	movs	r6, r1
 8003f30:	001d      	movs	r5, r3
 8003f32:	230e      	movs	r3, #14
 8003f34:	5ec9      	ldrsh	r1, [r1, r3]
 8003f36:	0014      	movs	r4, r2
 8003f38:	b096      	sub	sp, #88	; 0x58
 8003f3a:	2900      	cmp	r1, #0
 8003f3c:	da07      	bge.n	8003f4e <__swhatbuf_r+0x22>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	89b3      	ldrh	r3, [r6, #12]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	d411      	bmi.n	8003f6c <__swhatbuf_r+0x40>
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	e00f      	b.n	8003f6e <__swhatbuf_r+0x42>
 8003f4e:	466a      	mov	r2, sp
 8003f50:	f000 fc7a 	bl	8004848 <_fstat_r>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	dbf2      	blt.n	8003f3e <__swhatbuf_r+0x12>
 8003f58:	23f0      	movs	r3, #240	; 0xf0
 8003f5a:	9901      	ldr	r1, [sp, #4]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4019      	ands	r1, r3
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <__swhatbuf_r+0x4c>)
 8003f62:	18c9      	adds	r1, r1, r3
 8003f64:	424b      	negs	r3, r1
 8003f66:	4159      	adcs	r1, r3
 8003f68:	6029      	str	r1, [r5, #0]
 8003f6a:	e7ed      	b.n	8003f48 <__swhatbuf_r+0x1c>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	2000      	movs	r0, #0
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	b016      	add	sp, #88	; 0x58
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	ffffe000 	.word	0xffffe000

08003f7c <__smakebuf_r>:
 8003f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7e:	2602      	movs	r6, #2
 8003f80:	898b      	ldrh	r3, [r1, #12]
 8003f82:	0005      	movs	r5, r0
 8003f84:	000c      	movs	r4, r1
 8003f86:	4233      	tst	r3, r6
 8003f88:	d006      	beq.n	8003f98 <__smakebuf_r+0x1c>
 8003f8a:	0023      	movs	r3, r4
 8003f8c:	3347      	adds	r3, #71	; 0x47
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	6123      	str	r3, [r4, #16]
 8003f92:	2301      	movs	r3, #1
 8003f94:	6163      	str	r3, [r4, #20]
 8003f96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f98:	466a      	mov	r2, sp
 8003f9a:	ab01      	add	r3, sp, #4
 8003f9c:	f7ff ffc6 	bl	8003f2c <__swhatbuf_r>
 8003fa0:	9900      	ldr	r1, [sp, #0]
 8003fa2:	0007      	movs	r7, r0
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	f000 f881 	bl	80040ac <_malloc_r>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d108      	bne.n	8003fc0 <__smakebuf_r+0x44>
 8003fae:	220c      	movs	r2, #12
 8003fb0:	5ea3      	ldrsh	r3, [r4, r2]
 8003fb2:	059a      	lsls	r2, r3, #22
 8003fb4:	d4ef      	bmi.n	8003f96 <__smakebuf_r+0x1a>
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	4393      	bics	r3, r2
 8003fba:	431e      	orrs	r6, r3
 8003fbc:	81a6      	strh	r6, [r4, #12]
 8003fbe:	e7e4      	b.n	8003f8a <__smakebuf_r+0xe>
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <__smakebuf_r+0x84>)
 8003fc2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	89a2      	ldrh	r2, [r4, #12]
 8003fc8:	6020      	str	r0, [r4, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	9b00      	ldr	r3, [sp, #0]
 8003fd0:	6120      	str	r0, [r4, #16]
 8003fd2:	6163      	str	r3, [r4, #20]
 8003fd4:	9b01      	ldr	r3, [sp, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <__smakebuf_r+0x7a>
 8003fda:	0028      	movs	r0, r5
 8003fdc:	230e      	movs	r3, #14
 8003fde:	5ee1      	ldrsh	r1, [r4, r3]
 8003fe0:	f000 fc44 	bl	800486c <_isatty_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d006      	beq.n	8003ff6 <__smakebuf_r+0x7a>
 8003fe8:	2203      	movs	r2, #3
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	4393      	bics	r3, r2
 8003fee:	001a      	movs	r2, r3
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	89a0      	ldrh	r0, [r4, #12]
 8003ff8:	4307      	orrs	r7, r0
 8003ffa:	81a7      	strh	r7, [r4, #12]
 8003ffc:	e7cb      	b.n	8003f96 <__smakebuf_r+0x1a>
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	08003d49 	.word	0x08003d49

08004004 <malloc>:
 8004004:	b510      	push	{r4, lr}
 8004006:	4b03      	ldr	r3, [pc, #12]	; (8004014 <malloc+0x10>)
 8004008:	0001      	movs	r1, r0
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	f000 f84e 	bl	80040ac <_malloc_r>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	2000000c 	.word	0x2000000c

08004018 <_free_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	0005      	movs	r5, r0
 800401c:	2900      	cmp	r1, #0
 800401e:	d010      	beq.n	8004042 <_free_r+0x2a>
 8004020:	1f0c      	subs	r4, r1, #4
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	da00      	bge.n	800402a <_free_r+0x12>
 8004028:	18e4      	adds	r4, r4, r3
 800402a:	0028      	movs	r0, r5
 800402c:	f000 fc50 	bl	80048d0 <__malloc_lock>
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <_free_r+0x90>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <_free_r+0x2c>
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6014      	str	r4, [r2, #0]
 800403c:	0028      	movs	r0, r5
 800403e:	f000 fc4f 	bl	80048e0 <__malloc_unlock>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x42>
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	1860      	adds	r0, r4, r1
 800404c:	4283      	cmp	r3, r0
 800404e:	d1f3      	bne.n	8004038 <_free_r+0x20>
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	1841      	adds	r1, r0, r1
 8004056:	6021      	str	r1, [r4, #0]
 8004058:	e7ee      	b.n	8004038 <_free_r+0x20>
 800405a:	001a      	movs	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <_free_r+0x4e>
 8004062:	42a3      	cmp	r3, r4
 8004064:	d9f9      	bls.n	800405a <_free_r+0x42>
 8004066:	6811      	ldr	r1, [r2, #0]
 8004068:	1850      	adds	r0, r2, r1
 800406a:	42a0      	cmp	r0, r4
 800406c:	d10b      	bne.n	8004086 <_free_r+0x6e>
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	1809      	adds	r1, r1, r0
 8004072:	1850      	adds	r0, r2, r1
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	4283      	cmp	r3, r0
 8004078:	d1e0      	bne.n	800403c <_free_r+0x24>
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	1841      	adds	r1, r0, r1
 8004080:	6011      	str	r1, [r2, #0]
 8004082:	6053      	str	r3, [r2, #4]
 8004084:	e7da      	b.n	800403c <_free_r+0x24>
 8004086:	42a0      	cmp	r0, r4
 8004088:	d902      	bls.n	8004090 <_free_r+0x78>
 800408a:	230c      	movs	r3, #12
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	e7d5      	b.n	800403c <_free_r+0x24>
 8004090:	6821      	ldr	r1, [r4, #0]
 8004092:	1860      	adds	r0, r4, r1
 8004094:	4283      	cmp	r3, r0
 8004096:	d103      	bne.n	80040a0 <_free_r+0x88>
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	1841      	adds	r1, r0, r1
 800409e:	6021      	str	r1, [r4, #0]
 80040a0:	6063      	str	r3, [r4, #4]
 80040a2:	6054      	str	r4, [r2, #4]
 80040a4:	e7ca      	b.n	800403c <_free_r+0x24>
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	20000114 	.word	0x20000114

080040ac <_malloc_r>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	2303      	movs	r3, #3
 80040b0:	1ccd      	adds	r5, r1, #3
 80040b2:	439d      	bics	r5, r3
 80040b4:	3508      	adds	r5, #8
 80040b6:	0006      	movs	r6, r0
 80040b8:	2d0c      	cmp	r5, #12
 80040ba:	d21f      	bcs.n	80040fc <_malloc_r+0x50>
 80040bc:	250c      	movs	r5, #12
 80040be:	42a9      	cmp	r1, r5
 80040c0:	d81e      	bhi.n	8004100 <_malloc_r+0x54>
 80040c2:	0030      	movs	r0, r6
 80040c4:	f000 fc04 	bl	80048d0 <__malloc_lock>
 80040c8:	4925      	ldr	r1, [pc, #148]	; (8004160 <_malloc_r+0xb4>)
 80040ca:	680a      	ldr	r2, [r1, #0]
 80040cc:	0014      	movs	r4, r2
 80040ce:	2c00      	cmp	r4, #0
 80040d0:	d11a      	bne.n	8004108 <_malloc_r+0x5c>
 80040d2:	4f24      	ldr	r7, [pc, #144]	; (8004164 <_malloc_r+0xb8>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <_malloc_r+0x38>
 80040da:	0021      	movs	r1, r4
 80040dc:	0030      	movs	r0, r6
 80040de:	f000 fb27 	bl	8004730 <_sbrk_r>
 80040e2:	6038      	str	r0, [r7, #0]
 80040e4:	0029      	movs	r1, r5
 80040e6:	0030      	movs	r0, r6
 80040e8:	f000 fb22 	bl	8004730 <_sbrk_r>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d12b      	bne.n	8004148 <_malloc_r+0x9c>
 80040f0:	230c      	movs	r3, #12
 80040f2:	0030      	movs	r0, r6
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	f000 fbf3 	bl	80048e0 <__malloc_unlock>
 80040fa:	e003      	b.n	8004104 <_malloc_r+0x58>
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	dade      	bge.n	80040be <_malloc_r+0x12>
 8004100:	230c      	movs	r3, #12
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	2000      	movs	r0, #0
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	1b5b      	subs	r3, r3, r5
 800410c:	d419      	bmi.n	8004142 <_malloc_r+0x96>
 800410e:	2b0b      	cmp	r3, #11
 8004110:	d903      	bls.n	800411a <_malloc_r+0x6e>
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	18e4      	adds	r4, r4, r3
 8004116:	6025      	str	r5, [r4, #0]
 8004118:	e003      	b.n	8004122 <_malloc_r+0x76>
 800411a:	6863      	ldr	r3, [r4, #4]
 800411c:	42a2      	cmp	r2, r4
 800411e:	d10e      	bne.n	800413e <_malloc_r+0x92>
 8004120:	600b      	str	r3, [r1, #0]
 8004122:	0030      	movs	r0, r6
 8004124:	f000 fbdc 	bl	80048e0 <__malloc_unlock>
 8004128:	0020      	movs	r0, r4
 800412a:	2207      	movs	r2, #7
 800412c:	300b      	adds	r0, #11
 800412e:	1d23      	adds	r3, r4, #4
 8004130:	4390      	bics	r0, r2
 8004132:	1ac2      	subs	r2, r0, r3
 8004134:	4298      	cmp	r0, r3
 8004136:	d0e6      	beq.n	8004106 <_malloc_r+0x5a>
 8004138:	1a1b      	subs	r3, r3, r0
 800413a:	50a3      	str	r3, [r4, r2]
 800413c:	e7e3      	b.n	8004106 <_malloc_r+0x5a>
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	e7ef      	b.n	8004122 <_malloc_r+0x76>
 8004142:	0022      	movs	r2, r4
 8004144:	6864      	ldr	r4, [r4, #4]
 8004146:	e7c2      	b.n	80040ce <_malloc_r+0x22>
 8004148:	2303      	movs	r3, #3
 800414a:	1cc4      	adds	r4, r0, #3
 800414c:	439c      	bics	r4, r3
 800414e:	42a0      	cmp	r0, r4
 8004150:	d0e1      	beq.n	8004116 <_malloc_r+0x6a>
 8004152:	1a21      	subs	r1, r4, r0
 8004154:	0030      	movs	r0, r6
 8004156:	f000 faeb 	bl	8004730 <_sbrk_r>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d1db      	bne.n	8004116 <_malloc_r+0x6a>
 800415e:	e7c7      	b.n	80040f0 <_malloc_r+0x44>
 8004160:	20000114 	.word	0x20000114
 8004164:	20000118 	.word	0x20000118

08004168 <__sfputc_r>:
 8004168:	6893      	ldr	r3, [r2, #8]
 800416a:	b510      	push	{r4, lr}
 800416c:	3b01      	subs	r3, #1
 800416e:	6093      	str	r3, [r2, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	da04      	bge.n	800417e <__sfputc_r+0x16>
 8004174:	6994      	ldr	r4, [r2, #24]
 8004176:	42a3      	cmp	r3, r4
 8004178:	db07      	blt.n	800418a <__sfputc_r+0x22>
 800417a:	290a      	cmp	r1, #10
 800417c:	d005      	beq.n	800418a <__sfputc_r+0x22>
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	1c58      	adds	r0, r3, #1
 8004182:	6010      	str	r0, [r2, #0]
 8004184:	7019      	strb	r1, [r3, #0]
 8004186:	0008      	movs	r0, r1
 8004188:	bd10      	pop	{r4, pc}
 800418a:	f7ff fc01 	bl	8003990 <__swbuf_r>
 800418e:	0001      	movs	r1, r0
 8004190:	e7f9      	b.n	8004186 <__sfputc_r+0x1e>

08004192 <__sfputs_r>:
 8004192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004194:	0006      	movs	r6, r0
 8004196:	000f      	movs	r7, r1
 8004198:	0014      	movs	r4, r2
 800419a:	18d5      	adds	r5, r2, r3
 800419c:	42ac      	cmp	r4, r5
 800419e:	d101      	bne.n	80041a4 <__sfputs_r+0x12>
 80041a0:	2000      	movs	r0, #0
 80041a2:	e007      	b.n	80041b4 <__sfputs_r+0x22>
 80041a4:	7821      	ldrb	r1, [r4, #0]
 80041a6:	003a      	movs	r2, r7
 80041a8:	0030      	movs	r0, r6
 80041aa:	f7ff ffdd 	bl	8004168 <__sfputc_r>
 80041ae:	3401      	adds	r4, #1
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d1f3      	bne.n	800419c <__sfputs_r+0xa>
 80041b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041b8 <_vfiprintf_r>:
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ba:	b0a1      	sub	sp, #132	; 0x84
 80041bc:	0006      	movs	r6, r0
 80041be:	000c      	movs	r4, r1
 80041c0:	001f      	movs	r7, r3
 80041c2:	9203      	str	r2, [sp, #12]
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d004      	beq.n	80041d2 <_vfiprintf_r+0x1a>
 80041c8:	6983      	ldr	r3, [r0, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <_vfiprintf_r+0x1a>
 80041ce:	f7ff fdf9 	bl	8003dc4 <__sinit>
 80041d2:	4b8e      	ldr	r3, [pc, #568]	; (800440c <_vfiprintf_r+0x254>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d11c      	bne.n	8004212 <_vfiprintf_r+0x5a>
 80041d8:	6874      	ldr	r4, [r6, #4]
 80041da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041dc:	07db      	lsls	r3, r3, #31
 80041de:	d405      	bmi.n	80041ec <_vfiprintf_r+0x34>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	059b      	lsls	r3, r3, #22
 80041e4:	d402      	bmi.n	80041ec <_vfiprintf_r+0x34>
 80041e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041e8:	f7ff fe9d 	bl	8003f26 <__retarget_lock_acquire_recursive>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	d502      	bpl.n	80041f8 <_vfiprintf_r+0x40>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11d      	bne.n	8004234 <_vfiprintf_r+0x7c>
 80041f8:	0021      	movs	r1, r4
 80041fa:	0030      	movs	r0, r6
 80041fc:	f7ff fc1e 	bl	8003a3c <__swsetup_r>
 8004200:	2800      	cmp	r0, #0
 8004202:	d017      	beq.n	8004234 <_vfiprintf_r+0x7c>
 8004204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004206:	07db      	lsls	r3, r3, #31
 8004208:	d50d      	bpl.n	8004226 <_vfiprintf_r+0x6e>
 800420a:	2001      	movs	r0, #1
 800420c:	4240      	negs	r0, r0
 800420e:	b021      	add	sp, #132	; 0x84
 8004210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <_vfiprintf_r+0x258>)
 8004214:	429c      	cmp	r4, r3
 8004216:	d101      	bne.n	800421c <_vfiprintf_r+0x64>
 8004218:	68b4      	ldr	r4, [r6, #8]
 800421a:	e7de      	b.n	80041da <_vfiprintf_r+0x22>
 800421c:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <_vfiprintf_r+0x25c>)
 800421e:	429c      	cmp	r4, r3
 8004220:	d1db      	bne.n	80041da <_vfiprintf_r+0x22>
 8004222:	68f4      	ldr	r4, [r6, #12]
 8004224:	e7d9      	b.n	80041da <_vfiprintf_r+0x22>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	d4ee      	bmi.n	800420a <_vfiprintf_r+0x52>
 800422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800422e:	f7ff fe7b 	bl	8003f28 <__retarget_lock_release_recursive>
 8004232:	e7ea      	b.n	800420a <_vfiprintf_r+0x52>
 8004234:	2300      	movs	r3, #0
 8004236:	ad08      	add	r5, sp, #32
 8004238:	616b      	str	r3, [r5, #20]
 800423a:	3320      	adds	r3, #32
 800423c:	766b      	strb	r3, [r5, #25]
 800423e:	3310      	adds	r3, #16
 8004240:	76ab      	strb	r3, [r5, #26]
 8004242:	9707      	str	r7, [sp, #28]
 8004244:	9f03      	ldr	r7, [sp, #12]
 8004246:	783b      	ldrb	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <_vfiprintf_r+0x98>
 800424c:	2b25      	cmp	r3, #37	; 0x25
 800424e:	d14e      	bne.n	80042ee <_vfiprintf_r+0x136>
 8004250:	9b03      	ldr	r3, [sp, #12]
 8004252:	1afb      	subs	r3, r7, r3
 8004254:	9305      	str	r3, [sp, #20]
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	429f      	cmp	r7, r3
 800425a:	d00d      	beq.n	8004278 <_vfiprintf_r+0xc0>
 800425c:	9b05      	ldr	r3, [sp, #20]
 800425e:	0021      	movs	r1, r4
 8004260:	0030      	movs	r0, r6
 8004262:	9a03      	ldr	r2, [sp, #12]
 8004264:	f7ff ff95 	bl	8004192 <__sfputs_r>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d100      	bne.n	800426e <_vfiprintf_r+0xb6>
 800426c:	e0b5      	b.n	80043da <_vfiprintf_r+0x222>
 800426e:	696a      	ldr	r2, [r5, #20]
 8004270:	9b05      	ldr	r3, [sp, #20]
 8004272:	4694      	mov	ip, r2
 8004274:	4463      	add	r3, ip
 8004276:	616b      	str	r3, [r5, #20]
 8004278:	783b      	ldrb	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d100      	bne.n	8004280 <_vfiprintf_r+0xc8>
 800427e:	e0ac      	b.n	80043da <_vfiprintf_r+0x222>
 8004280:	2201      	movs	r2, #1
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	9303      	str	r3, [sp, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	4252      	negs	r2, r2
 800428a:	606a      	str	r2, [r5, #4]
 800428c:	a904      	add	r1, sp, #16
 800428e:	3254      	adds	r2, #84	; 0x54
 8004290:	1852      	adds	r2, r2, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	60eb      	str	r3, [r5, #12]
 8004296:	60ab      	str	r3, [r5, #8]
 8004298:	7013      	strb	r3, [r2, #0]
 800429a:	65ab      	str	r3, [r5, #88]	; 0x58
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	2205      	movs	r2, #5
 80042a0:	7819      	ldrb	r1, [r3, #0]
 80042a2:	485d      	ldr	r0, [pc, #372]	; (8004418 <_vfiprintf_r+0x260>)
 80042a4:	f000 fb08 	bl	80048b8 <memchr>
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	1c5f      	adds	r7, r3, #1
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d120      	bne.n	80042f2 <_vfiprintf_r+0x13a>
 80042b0:	682a      	ldr	r2, [r5, #0]
 80042b2:	06d3      	lsls	r3, r2, #27
 80042b4:	d504      	bpl.n	80042c0 <_vfiprintf_r+0x108>
 80042b6:	2353      	movs	r3, #83	; 0x53
 80042b8:	a904      	add	r1, sp, #16
 80042ba:	185b      	adds	r3, r3, r1
 80042bc:	2120      	movs	r1, #32
 80042be:	7019      	strb	r1, [r3, #0]
 80042c0:	0713      	lsls	r3, r2, #28
 80042c2:	d504      	bpl.n	80042ce <_vfiprintf_r+0x116>
 80042c4:	2353      	movs	r3, #83	; 0x53
 80042c6:	a904      	add	r1, sp, #16
 80042c8:	185b      	adds	r3, r3, r1
 80042ca:	212b      	movs	r1, #43	; 0x2b
 80042cc:	7019      	strb	r1, [r3, #0]
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b2a      	cmp	r3, #42	; 0x2a
 80042d4:	d016      	beq.n	8004304 <_vfiprintf_r+0x14c>
 80042d6:	2100      	movs	r1, #0
 80042d8:	68eb      	ldr	r3, [r5, #12]
 80042da:	9f03      	ldr	r7, [sp, #12]
 80042dc:	783a      	ldrb	r2, [r7, #0]
 80042de:	1c78      	adds	r0, r7, #1
 80042e0:	3a30      	subs	r2, #48	; 0x30
 80042e2:	4684      	mov	ip, r0
 80042e4:	2a09      	cmp	r2, #9
 80042e6:	d94f      	bls.n	8004388 <_vfiprintf_r+0x1d0>
 80042e8:	2900      	cmp	r1, #0
 80042ea:	d111      	bne.n	8004310 <_vfiprintf_r+0x158>
 80042ec:	e017      	b.n	800431e <_vfiprintf_r+0x166>
 80042ee:	3701      	adds	r7, #1
 80042f0:	e7a9      	b.n	8004246 <_vfiprintf_r+0x8e>
 80042f2:	4b49      	ldr	r3, [pc, #292]	; (8004418 <_vfiprintf_r+0x260>)
 80042f4:	682a      	ldr	r2, [r5, #0]
 80042f6:	1ac0      	subs	r0, r0, r3
 80042f8:	2301      	movs	r3, #1
 80042fa:	4083      	lsls	r3, r0
 80042fc:	4313      	orrs	r3, r2
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	9703      	str	r7, [sp, #12]
 8004302:	e7cb      	b.n	800429c <_vfiprintf_r+0xe4>
 8004304:	9b07      	ldr	r3, [sp, #28]
 8004306:	1d19      	adds	r1, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	9107      	str	r1, [sp, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db01      	blt.n	8004314 <_vfiprintf_r+0x15c>
 8004310:	930b      	str	r3, [sp, #44]	; 0x2c
 8004312:	e004      	b.n	800431e <_vfiprintf_r+0x166>
 8004314:	425b      	negs	r3, r3
 8004316:	60eb      	str	r3, [r5, #12]
 8004318:	2302      	movs	r3, #2
 800431a:	4313      	orrs	r3, r2
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	783b      	ldrb	r3, [r7, #0]
 8004320:	2b2e      	cmp	r3, #46	; 0x2e
 8004322:	d10a      	bne.n	800433a <_vfiprintf_r+0x182>
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d137      	bne.n	800439a <_vfiprintf_r+0x1e2>
 800432a:	9b07      	ldr	r3, [sp, #28]
 800432c:	3702      	adds	r7, #2
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	9207      	str	r2, [sp, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db2d      	blt.n	8004394 <_vfiprintf_r+0x1dc>
 8004338:	9309      	str	r3, [sp, #36]	; 0x24
 800433a:	2203      	movs	r2, #3
 800433c:	7839      	ldrb	r1, [r7, #0]
 800433e:	4837      	ldr	r0, [pc, #220]	; (800441c <_vfiprintf_r+0x264>)
 8004340:	f000 faba 	bl	80048b8 <memchr>
 8004344:	2800      	cmp	r0, #0
 8004346:	d007      	beq.n	8004358 <_vfiprintf_r+0x1a0>
 8004348:	4b34      	ldr	r3, [pc, #208]	; (800441c <_vfiprintf_r+0x264>)
 800434a:	682a      	ldr	r2, [r5, #0]
 800434c:	1ac0      	subs	r0, r0, r3
 800434e:	2340      	movs	r3, #64	; 0x40
 8004350:	4083      	lsls	r3, r0
 8004352:	4313      	orrs	r3, r2
 8004354:	3701      	adds	r7, #1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	7839      	ldrb	r1, [r7, #0]
 800435a:	1c7b      	adds	r3, r7, #1
 800435c:	2206      	movs	r2, #6
 800435e:	4830      	ldr	r0, [pc, #192]	; (8004420 <_vfiprintf_r+0x268>)
 8004360:	9303      	str	r3, [sp, #12]
 8004362:	7629      	strb	r1, [r5, #24]
 8004364:	f000 faa8 	bl	80048b8 <memchr>
 8004368:	2800      	cmp	r0, #0
 800436a:	d045      	beq.n	80043f8 <_vfiprintf_r+0x240>
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <_vfiprintf_r+0x26c>)
 800436e:	2b00      	cmp	r3, #0
 8004370:	d127      	bne.n	80043c2 <_vfiprintf_r+0x20a>
 8004372:	2207      	movs	r2, #7
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	3307      	adds	r3, #7
 8004378:	4393      	bics	r3, r2
 800437a:	3308      	adds	r3, #8
 800437c:	9307      	str	r3, [sp, #28]
 800437e:	696b      	ldr	r3, [r5, #20]
 8004380:	9a04      	ldr	r2, [sp, #16]
 8004382:	189b      	adds	r3, r3, r2
 8004384:	616b      	str	r3, [r5, #20]
 8004386:	e75d      	b.n	8004244 <_vfiprintf_r+0x8c>
 8004388:	210a      	movs	r1, #10
 800438a:	434b      	muls	r3, r1
 800438c:	4667      	mov	r7, ip
 800438e:	189b      	adds	r3, r3, r2
 8004390:	3909      	subs	r1, #9
 8004392:	e7a3      	b.n	80042dc <_vfiprintf_r+0x124>
 8004394:	2301      	movs	r3, #1
 8004396:	425b      	negs	r3, r3
 8004398:	e7ce      	b.n	8004338 <_vfiprintf_r+0x180>
 800439a:	2300      	movs	r3, #0
 800439c:	001a      	movs	r2, r3
 800439e:	3701      	adds	r7, #1
 80043a0:	606b      	str	r3, [r5, #4]
 80043a2:	7839      	ldrb	r1, [r7, #0]
 80043a4:	1c78      	adds	r0, r7, #1
 80043a6:	3930      	subs	r1, #48	; 0x30
 80043a8:	4684      	mov	ip, r0
 80043aa:	2909      	cmp	r1, #9
 80043ac:	d903      	bls.n	80043b6 <_vfiprintf_r+0x1fe>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0c3      	beq.n	800433a <_vfiprintf_r+0x182>
 80043b2:	9209      	str	r2, [sp, #36]	; 0x24
 80043b4:	e7c1      	b.n	800433a <_vfiprintf_r+0x182>
 80043b6:	230a      	movs	r3, #10
 80043b8:	435a      	muls	r2, r3
 80043ba:	4667      	mov	r7, ip
 80043bc:	1852      	adds	r2, r2, r1
 80043be:	3b09      	subs	r3, #9
 80043c0:	e7ef      	b.n	80043a2 <_vfiprintf_r+0x1ea>
 80043c2:	ab07      	add	r3, sp, #28
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	0022      	movs	r2, r4
 80043c8:	0029      	movs	r1, r5
 80043ca:	0030      	movs	r0, r6
 80043cc:	4b16      	ldr	r3, [pc, #88]	; (8004428 <_vfiprintf_r+0x270>)
 80043ce:	e000      	b.n	80043d2 <_vfiprintf_r+0x21a>
 80043d0:	bf00      	nop
 80043d2:	9004      	str	r0, [sp, #16]
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	3301      	adds	r3, #1
 80043d8:	d1d1      	bne.n	800437e <_vfiprintf_r+0x1c6>
 80043da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043dc:	07db      	lsls	r3, r3, #31
 80043de:	d405      	bmi.n	80043ec <_vfiprintf_r+0x234>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	059b      	lsls	r3, r3, #22
 80043e4:	d402      	bmi.n	80043ec <_vfiprintf_r+0x234>
 80043e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e8:	f7ff fd9e 	bl	8003f28 <__retarget_lock_release_recursive>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	065b      	lsls	r3, r3, #25
 80043f0:	d500      	bpl.n	80043f4 <_vfiprintf_r+0x23c>
 80043f2:	e70a      	b.n	800420a <_vfiprintf_r+0x52>
 80043f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043f6:	e70a      	b.n	800420e <_vfiprintf_r+0x56>
 80043f8:	ab07      	add	r3, sp, #28
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	0022      	movs	r2, r4
 80043fe:	0029      	movs	r1, r5
 8004400:	0030      	movs	r0, r6
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <_vfiprintf_r+0x270>)
 8004404:	f000 f882 	bl	800450c <_printf_i>
 8004408:	e7e3      	b.n	80043d2 <_vfiprintf_r+0x21a>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	08004cdc 	.word	0x08004cdc
 8004410:	08004cfc 	.word	0x08004cfc
 8004414:	08004cbc 	.word	0x08004cbc
 8004418:	08004d1c 	.word	0x08004d1c
 800441c:	08004d22 	.word	0x08004d22
 8004420:	08004d26 	.word	0x08004d26
 8004424:	00000000 	.word	0x00000000
 8004428:	08004193 	.word	0x08004193

0800442c <_printf_common>:
 800442c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800442e:	0015      	movs	r5, r2
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	688a      	ldr	r2, [r1, #8]
 8004434:	690b      	ldr	r3, [r1, #16]
 8004436:	000c      	movs	r4, r1
 8004438:	9000      	str	r0, [sp, #0]
 800443a:	4293      	cmp	r3, r2
 800443c:	da00      	bge.n	8004440 <_printf_common+0x14>
 800443e:	0013      	movs	r3, r2
 8004440:	0022      	movs	r2, r4
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	3243      	adds	r2, #67	; 0x43
 8004446:	7812      	ldrb	r2, [r2, #0]
 8004448:	2a00      	cmp	r2, #0
 800444a:	d001      	beq.n	8004450 <_printf_common+0x24>
 800444c:	3301      	adds	r3, #1
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	d502      	bpl.n	800445c <_printf_common+0x30>
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	3302      	adds	r3, #2
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	2306      	movs	r3, #6
 8004460:	0017      	movs	r7, r2
 8004462:	401f      	ands	r7, r3
 8004464:	421a      	tst	r2, r3
 8004466:	d027      	beq.n	80044b8 <_printf_common+0x8c>
 8004468:	0023      	movs	r3, r4
 800446a:	3343      	adds	r3, #67	; 0x43
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	1e5a      	subs	r2, r3, #1
 8004470:	4193      	sbcs	r3, r2
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	0692      	lsls	r2, r2, #26
 8004476:	d430      	bmi.n	80044da <_printf_common+0xae>
 8004478:	0022      	movs	r2, r4
 800447a:	9901      	ldr	r1, [sp, #4]
 800447c:	9800      	ldr	r0, [sp, #0]
 800447e:	9e08      	ldr	r6, [sp, #32]
 8004480:	3243      	adds	r2, #67	; 0x43
 8004482:	47b0      	blx	r6
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d025      	beq.n	80044d4 <_printf_common+0xa8>
 8004488:	2306      	movs	r3, #6
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	682a      	ldr	r2, [r5, #0]
 800448e:	68e1      	ldr	r1, [r4, #12]
 8004490:	2500      	movs	r5, #0
 8004492:	4003      	ands	r3, r0
 8004494:	2b04      	cmp	r3, #4
 8004496:	d103      	bne.n	80044a0 <_printf_common+0x74>
 8004498:	1a8d      	subs	r5, r1, r2
 800449a:	43eb      	mvns	r3, r5
 800449c:	17db      	asrs	r3, r3, #31
 800449e:	401d      	ands	r5, r3
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	6922      	ldr	r2, [r4, #16]
 80044a4:	4293      	cmp	r3, r2
 80044a6:	dd01      	ble.n	80044ac <_printf_common+0x80>
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	18ed      	adds	r5, r5, r3
 80044ac:	2700      	movs	r7, #0
 80044ae:	42bd      	cmp	r5, r7
 80044b0:	d120      	bne.n	80044f4 <_printf_common+0xc8>
 80044b2:	2000      	movs	r0, #0
 80044b4:	e010      	b.n	80044d8 <_printf_common+0xac>
 80044b6:	3701      	adds	r7, #1
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	682a      	ldr	r2, [r5, #0]
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	42bb      	cmp	r3, r7
 80044c0:	ddd2      	ble.n	8004468 <_printf_common+0x3c>
 80044c2:	0022      	movs	r2, r4
 80044c4:	2301      	movs	r3, #1
 80044c6:	9901      	ldr	r1, [sp, #4]
 80044c8:	9800      	ldr	r0, [sp, #0]
 80044ca:	9e08      	ldr	r6, [sp, #32]
 80044cc:	3219      	adds	r2, #25
 80044ce:	47b0      	blx	r6
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d1f0      	bne.n	80044b6 <_printf_common+0x8a>
 80044d4:	2001      	movs	r0, #1
 80044d6:	4240      	negs	r0, r0
 80044d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044da:	2030      	movs	r0, #48	; 0x30
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	3143      	adds	r1, #67	; 0x43
 80044e0:	7008      	strb	r0, [r1, #0]
 80044e2:	0021      	movs	r1, r4
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	3145      	adds	r1, #69	; 0x45
 80044e8:	7809      	ldrb	r1, [r1, #0]
 80044ea:	18a2      	adds	r2, r4, r2
 80044ec:	3243      	adds	r2, #67	; 0x43
 80044ee:	3302      	adds	r3, #2
 80044f0:	7011      	strb	r1, [r2, #0]
 80044f2:	e7c1      	b.n	8004478 <_printf_common+0x4c>
 80044f4:	0022      	movs	r2, r4
 80044f6:	2301      	movs	r3, #1
 80044f8:	9901      	ldr	r1, [sp, #4]
 80044fa:	9800      	ldr	r0, [sp, #0]
 80044fc:	9e08      	ldr	r6, [sp, #32]
 80044fe:	321a      	adds	r2, #26
 8004500:	47b0      	blx	r6
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d0e6      	beq.n	80044d4 <_printf_common+0xa8>
 8004506:	3701      	adds	r7, #1
 8004508:	e7d1      	b.n	80044ae <_printf_common+0x82>
	...

0800450c <_printf_i>:
 800450c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450e:	b08b      	sub	sp, #44	; 0x2c
 8004510:	9206      	str	r2, [sp, #24]
 8004512:	000a      	movs	r2, r1
 8004514:	3243      	adds	r2, #67	; 0x43
 8004516:	9307      	str	r3, [sp, #28]
 8004518:	9005      	str	r0, [sp, #20]
 800451a:	9204      	str	r2, [sp, #16]
 800451c:	7e0a      	ldrb	r2, [r1, #24]
 800451e:	000c      	movs	r4, r1
 8004520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004522:	2a78      	cmp	r2, #120	; 0x78
 8004524:	d806      	bhi.n	8004534 <_printf_i+0x28>
 8004526:	2a62      	cmp	r2, #98	; 0x62
 8004528:	d808      	bhi.n	800453c <_printf_i+0x30>
 800452a:	2a00      	cmp	r2, #0
 800452c:	d100      	bne.n	8004530 <_printf_i+0x24>
 800452e:	e0c0      	b.n	80046b2 <_printf_i+0x1a6>
 8004530:	2a58      	cmp	r2, #88	; 0x58
 8004532:	d052      	beq.n	80045da <_printf_i+0xce>
 8004534:	0026      	movs	r6, r4
 8004536:	3642      	adds	r6, #66	; 0x42
 8004538:	7032      	strb	r2, [r6, #0]
 800453a:	e022      	b.n	8004582 <_printf_i+0x76>
 800453c:	0010      	movs	r0, r2
 800453e:	3863      	subs	r0, #99	; 0x63
 8004540:	2815      	cmp	r0, #21
 8004542:	d8f7      	bhi.n	8004534 <_printf_i+0x28>
 8004544:	f7fb fde0 	bl	8000108 <__gnu_thumb1_case_shi>
 8004548:	001f0016 	.word	0x001f0016
 800454c:	fff6fff6 	.word	0xfff6fff6
 8004550:	fff6fff6 	.word	0xfff6fff6
 8004554:	fff6001f 	.word	0xfff6001f
 8004558:	fff6fff6 	.word	0xfff6fff6
 800455c:	00a8fff6 	.word	0x00a8fff6
 8004560:	009a0036 	.word	0x009a0036
 8004564:	fff6fff6 	.word	0xfff6fff6
 8004568:	fff600b9 	.word	0xfff600b9
 800456c:	fff60036 	.word	0xfff60036
 8004570:	009efff6 	.word	0x009efff6
 8004574:	0026      	movs	r6, r4
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	3642      	adds	r6, #66	; 0x42
 800457a:	1d11      	adds	r1, r2, #4
 800457c:	6019      	str	r1, [r3, #0]
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	7033      	strb	r3, [r6, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	e0a7      	b.n	80046d6 <_printf_i+0x1ca>
 8004586:	6808      	ldr	r0, [r1, #0]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	1d0a      	adds	r2, r1, #4
 800458c:	0605      	lsls	r5, r0, #24
 800458e:	d50b      	bpl.n	80045a8 <_printf_i+0x9c>
 8004590:	680d      	ldr	r5, [r1, #0]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	2d00      	cmp	r5, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0x94>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	9a04      	ldr	r2, [sp, #16]
 800459c:	426d      	negs	r5, r5
 800459e:	7013      	strb	r3, [r2, #0]
 80045a0:	4b61      	ldr	r3, [pc, #388]	; (8004728 <_printf_i+0x21c>)
 80045a2:	270a      	movs	r7, #10
 80045a4:	9303      	str	r3, [sp, #12]
 80045a6:	e032      	b.n	800460e <_printf_i+0x102>
 80045a8:	680d      	ldr	r5, [r1, #0]
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	0641      	lsls	r1, r0, #25
 80045ae:	d5f1      	bpl.n	8004594 <_printf_i+0x88>
 80045b0:	b22d      	sxth	r5, r5
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0x88>
 80045b4:	680d      	ldr	r5, [r1, #0]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	1d08      	adds	r0, r1, #4
 80045ba:	6018      	str	r0, [r3, #0]
 80045bc:	062e      	lsls	r6, r5, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xb8>
 80045c0:	680d      	ldr	r5, [r1, #0]
 80045c2:	e003      	b.n	80045cc <_printf_i+0xc0>
 80045c4:	066d      	lsls	r5, r5, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xb4>
 80045c8:	680d      	ldr	r5, [r1, #0]
 80045ca:	b2ad      	uxth	r5, r5
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <_printf_i+0x21c>)
 80045ce:	270a      	movs	r7, #10
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	2a6f      	cmp	r2, #111	; 0x6f
 80045d4:	d117      	bne.n	8004606 <_printf_i+0xfa>
 80045d6:	2708      	movs	r7, #8
 80045d8:	e015      	b.n	8004606 <_printf_i+0xfa>
 80045da:	3145      	adds	r1, #69	; 0x45
 80045dc:	700a      	strb	r2, [r1, #0]
 80045de:	4a52      	ldr	r2, [pc, #328]	; (8004728 <_printf_i+0x21c>)
 80045e0:	9203      	str	r2, [sp, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	ca20      	ldmia	r2!, {r5}
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	0608      	lsls	r0, r1, #24
 80045ec:	d550      	bpl.n	8004690 <_printf_i+0x184>
 80045ee:	07cb      	lsls	r3, r1, #31
 80045f0:	d502      	bpl.n	80045f8 <_printf_i+0xec>
 80045f2:	2320      	movs	r3, #32
 80045f4:	4319      	orrs	r1, r3
 80045f6:	6021      	str	r1, [r4, #0]
 80045f8:	2710      	movs	r7, #16
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	d103      	bne.n	8004606 <_printf_i+0xfa>
 80045fe:	2320      	movs	r3, #32
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	439a      	bics	r2, r3
 8004604:	6022      	str	r2, [r4, #0]
 8004606:	0023      	movs	r3, r4
 8004608:	2200      	movs	r2, #0
 800460a:	3343      	adds	r3, #67	; 0x43
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db03      	blt.n	800461e <_printf_i+0x112>
 8004616:	2204      	movs	r2, #4
 8004618:	6821      	ldr	r1, [r4, #0]
 800461a:	4391      	bics	r1, r2
 800461c:	6021      	str	r1, [r4, #0]
 800461e:	2d00      	cmp	r5, #0
 8004620:	d102      	bne.n	8004628 <_printf_i+0x11c>
 8004622:	9e04      	ldr	r6, [sp, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <_printf_i+0x136>
 8004628:	9e04      	ldr	r6, [sp, #16]
 800462a:	0028      	movs	r0, r5
 800462c:	0039      	movs	r1, r7
 800462e:	f7fb fdfb 	bl	8000228 <__aeabi_uidivmod>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	3e01      	subs	r6, #1
 8004636:	5c5b      	ldrb	r3, [r3, r1]
 8004638:	7033      	strb	r3, [r6, #0]
 800463a:	002b      	movs	r3, r5
 800463c:	0005      	movs	r5, r0
 800463e:	429f      	cmp	r7, r3
 8004640:	d9f3      	bls.n	800462a <_printf_i+0x11e>
 8004642:	2f08      	cmp	r7, #8
 8004644:	d109      	bne.n	800465a <_printf_i+0x14e>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	07db      	lsls	r3, r3, #31
 800464a:	d506      	bpl.n	800465a <_printf_i+0x14e>
 800464c:	6863      	ldr	r3, [r4, #4]
 800464e:	6922      	ldr	r2, [r4, #16]
 8004650:	4293      	cmp	r3, r2
 8004652:	dc02      	bgt.n	800465a <_printf_i+0x14e>
 8004654:	2330      	movs	r3, #48	; 0x30
 8004656:	3e01      	subs	r6, #1
 8004658:	7033      	strb	r3, [r6, #0]
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	6123      	str	r3, [r4, #16]
 8004660:	9b07      	ldr	r3, [sp, #28]
 8004662:	0021      	movs	r1, r4
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	9805      	ldr	r0, [sp, #20]
 8004668:	9b06      	ldr	r3, [sp, #24]
 800466a:	aa09      	add	r2, sp, #36	; 0x24
 800466c:	f7ff fede 	bl	800442c <_printf_common>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d135      	bne.n	80046e0 <_printf_i+0x1d4>
 8004674:	2001      	movs	r0, #1
 8004676:	4240      	negs	r0, r0
 8004678:	b00b      	add	sp, #44	; 0x2c
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467c:	2220      	movs	r2, #32
 800467e:	6809      	ldr	r1, [r1, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	6022      	str	r2, [r4, #0]
 8004684:	0022      	movs	r2, r4
 8004686:	2178      	movs	r1, #120	; 0x78
 8004688:	3245      	adds	r2, #69	; 0x45
 800468a:	7011      	strb	r1, [r2, #0]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <_printf_i+0x220>)
 800468e:	e7a7      	b.n	80045e0 <_printf_i+0xd4>
 8004690:	0648      	lsls	r0, r1, #25
 8004692:	d5ac      	bpl.n	80045ee <_printf_i+0xe2>
 8004694:	b2ad      	uxth	r5, r5
 8004696:	e7aa      	b.n	80045ee <_printf_i+0xe2>
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	680d      	ldr	r5, [r1, #0]
 800469c:	1d10      	adds	r0, r2, #4
 800469e:	6949      	ldr	r1, [r1, #20]
 80046a0:	6018      	str	r0, [r3, #0]
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	062e      	lsls	r6, r5, #24
 80046a6:	d501      	bpl.n	80046ac <_printf_i+0x1a0>
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	e002      	b.n	80046b2 <_printf_i+0x1a6>
 80046ac:	066d      	lsls	r5, r5, #25
 80046ae:	d5fb      	bpl.n	80046a8 <_printf_i+0x19c>
 80046b0:	8019      	strh	r1, [r3, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9e04      	ldr	r6, [sp, #16]
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	e7d2      	b.n	8004660 <_printf_i+0x154>
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	1d11      	adds	r1, r2, #4
 80046be:	6019      	str	r1, [r3, #0]
 80046c0:	6816      	ldr	r6, [r2, #0]
 80046c2:	2100      	movs	r1, #0
 80046c4:	0030      	movs	r0, r6
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	f000 f8f6 	bl	80048b8 <memchr>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d001      	beq.n	80046d4 <_printf_i+0x1c8>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	6060      	str	r0, [r4, #4]
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	2300      	movs	r3, #0
 80046da:	9a04      	ldr	r2, [sp, #16]
 80046dc:	7013      	strb	r3, [r2, #0]
 80046de:	e7bf      	b.n	8004660 <_printf_i+0x154>
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	0032      	movs	r2, r6
 80046e4:	9906      	ldr	r1, [sp, #24]
 80046e6:	9805      	ldr	r0, [sp, #20]
 80046e8:	9d07      	ldr	r5, [sp, #28]
 80046ea:	47a8      	blx	r5
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d0c1      	beq.n	8004674 <_printf_i+0x168>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	079b      	lsls	r3, r3, #30
 80046f4:	d415      	bmi.n	8004722 <_printf_i+0x216>
 80046f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f8:	68e0      	ldr	r0, [r4, #12]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	dabc      	bge.n	8004678 <_printf_i+0x16c>
 80046fe:	0018      	movs	r0, r3
 8004700:	e7ba      	b.n	8004678 <_printf_i+0x16c>
 8004702:	0022      	movs	r2, r4
 8004704:	2301      	movs	r3, #1
 8004706:	9906      	ldr	r1, [sp, #24]
 8004708:	9805      	ldr	r0, [sp, #20]
 800470a:	9e07      	ldr	r6, [sp, #28]
 800470c:	3219      	adds	r2, #25
 800470e:	47b0      	blx	r6
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d0af      	beq.n	8004674 <_printf_i+0x168>
 8004714:	3501      	adds	r5, #1
 8004716:	68e3      	ldr	r3, [r4, #12]
 8004718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	42ab      	cmp	r3, r5
 800471e:	dcf0      	bgt.n	8004702 <_printf_i+0x1f6>
 8004720:	e7e9      	b.n	80046f6 <_printf_i+0x1ea>
 8004722:	2500      	movs	r5, #0
 8004724:	e7f7      	b.n	8004716 <_printf_i+0x20a>
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	08004d2d 	.word	0x08004d2d
 800472c:	08004d3e 	.word	0x08004d3e

08004730 <_sbrk_r>:
 8004730:	2300      	movs	r3, #0
 8004732:	b570      	push	{r4, r5, r6, lr}
 8004734:	4d06      	ldr	r5, [pc, #24]	; (8004750 <_sbrk_r+0x20>)
 8004736:	0004      	movs	r4, r0
 8004738:	0008      	movs	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fc fa32 	bl	8000ba4 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d103      	bne.n	800474c <_sbrk_r+0x1c>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d000      	beq.n	800474c <_sbrk_r+0x1c>
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000240 	.word	0x20000240

08004754 <__sread>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	000c      	movs	r4, r1
 8004758:	250e      	movs	r5, #14
 800475a:	5f49      	ldrsh	r1, [r1, r5]
 800475c:	f000 f8c8 	bl	80048f0 <_read_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	db03      	blt.n	800476c <__sread+0x18>
 8004764:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004766:	181b      	adds	r3, r3, r0
 8004768:	6563      	str	r3, [r4, #84]	; 0x54
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	4a02      	ldr	r2, [pc, #8]	; (8004778 <__sread+0x24>)
 8004770:	4013      	ands	r3, r2
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	e7f9      	b.n	800476a <__sread+0x16>
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	ffffefff 	.word	0xffffefff

0800477c <__swrite>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	001f      	movs	r7, r3
 8004780:	898b      	ldrh	r3, [r1, #12]
 8004782:	0005      	movs	r5, r0
 8004784:	000c      	movs	r4, r1
 8004786:	0016      	movs	r6, r2
 8004788:	05db      	lsls	r3, r3, #23
 800478a:	d505      	bpl.n	8004798 <__swrite+0x1c>
 800478c:	230e      	movs	r3, #14
 800478e:	5ec9      	ldrsh	r1, [r1, r3]
 8004790:	2200      	movs	r2, #0
 8004792:	2302      	movs	r3, #2
 8004794:	f000 f87c 	bl	8004890 <_lseek_r>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <__swrite+0x34>)
 800479c:	0028      	movs	r0, r5
 800479e:	4013      	ands	r3, r2
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	0032      	movs	r2, r6
 80047a4:	230e      	movs	r3, #14
 80047a6:	5ee1      	ldrsh	r1, [r4, r3]
 80047a8:	003b      	movs	r3, r7
 80047aa:	f000 f81f 	bl	80047ec <_write_r>
 80047ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b0:	ffffefff 	.word	0xffffefff

080047b4 <__sseek>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	000c      	movs	r4, r1
 80047b8:	250e      	movs	r5, #14
 80047ba:	5f49      	ldrsh	r1, [r1, r5]
 80047bc:	f000 f868 	bl	8004890 <_lseek_r>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	1c42      	adds	r2, r0, #1
 80047c4:	d103      	bne.n	80047ce <__sseek+0x1a>
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <__sseek+0x28>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	0152      	lsls	r2, r2, #5
 80047d2:	4313      	orrs	r3, r2
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	6560      	str	r0, [r4, #84]	; 0x54
 80047d8:	e7f8      	b.n	80047cc <__sseek+0x18>
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	ffffefff 	.word	0xffffefff

080047e0 <__sclose>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	230e      	movs	r3, #14
 80047e4:	5ec9      	ldrsh	r1, [r1, r3]
 80047e6:	f000 f81d 	bl	8004824 <_close_r>
 80047ea:	bd10      	pop	{r4, pc}

080047ec <_write_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	0004      	movs	r4, r0
 80047f0:	0008      	movs	r0, r1
 80047f2:	0011      	movs	r1, r2
 80047f4:	001a      	movs	r2, r3
 80047f6:	2300      	movs	r3, #0
 80047f8:	4d05      	ldr	r5, [pc, #20]	; (8004810 <_write_r+0x24>)
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fb fe34 	bl	8000468 <_write>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d103      	bne.n	800480c <_write_r+0x20>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d000      	beq.n	800480c <_write_r+0x20>
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	20000240 	.word	0x20000240

08004814 <abort>:
 8004814:	2006      	movs	r0, #6
 8004816:	b510      	push	{r4, lr}
 8004818:	f000 f8a8 	bl	800496c <raise>
 800481c:	2001      	movs	r0, #1
 800481e:	f7fc f96b 	bl	8000af8 <_exit>
	...

08004824 <_close_r>:
 8004824:	2300      	movs	r3, #0
 8004826:	b570      	push	{r4, r5, r6, lr}
 8004828:	4d06      	ldr	r5, [pc, #24]	; (8004844 <_close_r+0x20>)
 800482a:	0004      	movs	r4, r0
 800482c:	0008      	movs	r0, r1
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	f7fc f98b 	bl	8000b4a <_close>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d103      	bne.n	8004840 <_close_r+0x1c>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d000      	beq.n	8004840 <_close_r+0x1c>
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	20000240 	.word	0x20000240

08004848 <_fstat_r>:
 8004848:	2300      	movs	r3, #0
 800484a:	b570      	push	{r4, r5, r6, lr}
 800484c:	4d06      	ldr	r5, [pc, #24]	; (8004868 <_fstat_r+0x20>)
 800484e:	0004      	movs	r4, r0
 8004850:	0008      	movs	r0, r1
 8004852:	0011      	movs	r1, r2
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	f7fc f982 	bl	8000b5e <_fstat>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	d103      	bne.n	8004866 <_fstat_r+0x1e>
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d000      	beq.n	8004866 <_fstat_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	20000240 	.word	0x20000240

0800486c <_isatty_r>:
 800486c:	2300      	movs	r3, #0
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	4d06      	ldr	r5, [pc, #24]	; (800488c <_isatty_r+0x20>)
 8004872:	0004      	movs	r4, r0
 8004874:	0008      	movs	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7fc f97f 	bl	8000b7a <_isatty>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d103      	bne.n	8004888 <_isatty_r+0x1c>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d000      	beq.n	8004888 <_isatty_r+0x1c>
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	bd70      	pop	{r4, r5, r6, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	20000240 	.word	0x20000240

08004890 <_lseek_r>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	0004      	movs	r4, r0
 8004894:	0008      	movs	r0, r1
 8004896:	0011      	movs	r1, r2
 8004898:	001a      	movs	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	4d05      	ldr	r5, [pc, #20]	; (80048b4 <_lseek_r+0x24>)
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc f974 	bl	8000b8c <_lseek>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d103      	bne.n	80048b0 <_lseek_r+0x20>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d000      	beq.n	80048b0 <_lseek_r+0x20>
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	bd70      	pop	{r4, r5, r6, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	20000240 	.word	0x20000240

080048b8 <memchr>:
 80048b8:	b2c9      	uxtb	r1, r1
 80048ba:	1882      	adds	r2, r0, r2
 80048bc:	4290      	cmp	r0, r2
 80048be:	d101      	bne.n	80048c4 <memchr+0xc>
 80048c0:	2000      	movs	r0, #0
 80048c2:	4770      	bx	lr
 80048c4:	7803      	ldrb	r3, [r0, #0]
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d0fb      	beq.n	80048c2 <memchr+0xa>
 80048ca:	3001      	adds	r0, #1
 80048cc:	e7f6      	b.n	80048bc <memchr+0x4>
	...

080048d0 <__malloc_lock>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4802      	ldr	r0, [pc, #8]	; (80048dc <__malloc_lock+0xc>)
 80048d4:	f7ff fb27 	bl	8003f26 <__retarget_lock_acquire_recursive>
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000238 	.word	0x20000238

080048e0 <__malloc_unlock>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4802      	ldr	r0, [pc, #8]	; (80048ec <__malloc_unlock+0xc>)
 80048e4:	f7ff fb20 	bl	8003f28 <__retarget_lock_release_recursive>
 80048e8:	bd10      	pop	{r4, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000238 	.word	0x20000238

080048f0 <_read_r>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	0004      	movs	r4, r0
 80048f4:	0008      	movs	r0, r1
 80048f6:	0011      	movs	r1, r2
 80048f8:	001a      	movs	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4d05      	ldr	r5, [pc, #20]	; (8004914 <_read_r+0x24>)
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	f7fc f906 	bl	8000b10 <_read>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d103      	bne.n	8004910 <_read_r+0x20>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d000      	beq.n	8004910 <_read_r+0x20>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20000240 	.word	0x20000240

08004918 <_raise_r>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	0004      	movs	r4, r0
 800491c:	000d      	movs	r5, r1
 800491e:	291f      	cmp	r1, #31
 8004920:	d904      	bls.n	800492c <_raise_r+0x14>
 8004922:	2316      	movs	r3, #22
 8004924:	6003      	str	r3, [r0, #0]
 8004926:	2001      	movs	r0, #1
 8004928:	4240      	negs	r0, r0
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <_raise_r+0x24>
 8004932:	008a      	lsls	r2, r1, #2
 8004934:	189b      	adds	r3, r3, r2
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2a00      	cmp	r2, #0
 800493a:	d108      	bne.n	800494e <_raise_r+0x36>
 800493c:	0020      	movs	r0, r4
 800493e:	f000 f831 	bl	80049a4 <_getpid_r>
 8004942:	002a      	movs	r2, r5
 8004944:	0001      	movs	r1, r0
 8004946:	0020      	movs	r0, r4
 8004948:	f000 f81a 	bl	8004980 <_kill_r>
 800494c:	e7ed      	b.n	800492a <_raise_r+0x12>
 800494e:	2000      	movs	r0, #0
 8004950:	2a01      	cmp	r2, #1
 8004952:	d0ea      	beq.n	800492a <_raise_r+0x12>
 8004954:	1c51      	adds	r1, r2, #1
 8004956:	d103      	bne.n	8004960 <_raise_r+0x48>
 8004958:	2316      	movs	r3, #22
 800495a:	3001      	adds	r0, #1
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	e7e4      	b.n	800492a <_raise_r+0x12>
 8004960:	2400      	movs	r4, #0
 8004962:	0028      	movs	r0, r5
 8004964:	601c      	str	r4, [r3, #0]
 8004966:	4790      	blx	r2
 8004968:	0020      	movs	r0, r4
 800496a:	e7de      	b.n	800492a <_raise_r+0x12>

0800496c <raise>:
 800496c:	b510      	push	{r4, lr}
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <raise+0x10>)
 8004970:	0001      	movs	r1, r0
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	f7ff ffd0 	bl	8004918 <_raise_r>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	2000000c 	.word	0x2000000c

08004980 <_kill_r>:
 8004980:	2300      	movs	r3, #0
 8004982:	b570      	push	{r4, r5, r6, lr}
 8004984:	4d06      	ldr	r5, [pc, #24]	; (80049a0 <_kill_r+0x20>)
 8004986:	0004      	movs	r4, r0
 8004988:	0008      	movs	r0, r1
 800498a:	0011      	movs	r1, r2
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	f7fc f8a3 	bl	8000ad8 <_kill>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d103      	bne.n	800499e <_kill_r+0x1e>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d000      	beq.n	800499e <_kill_r+0x1e>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	20000240 	.word	0x20000240

080049a4 <_getpid_r>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	f7fc f891 	bl	8000acc <_getpid>
 80049aa:	bd10      	pop	{r4, pc}

080049ac <_init>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr

080049b8 <_fini>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr
